# ca_rules_questions_bc.py

from pyke import contexts, pattern, bc_rule

pyke_version = '1.1.1'
compiler_version = 1

def no_fp(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        notany5_worked = True
        with engine.prove('questions', 'intervals_RR', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.no_fp: got unexpected plan from when clause 1"
            with engine.prove('questions', 'tooth_P', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.no_fp: got unexpected plan from when clause 2"
                with engine.prove('questions', 'changes_insec', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.no_fp: got unexpected plan from when clause 3"
                    notany5_worked = False
                    if not notany5_worked: break
                if not notany5_worked: break
            if not notany5_worked: break
        if notany5_worked:
          rule.rule_base.num_bc_rule_successes += 1
          yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def that_is_fp(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'intervals_RR', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.that_is_fp: got unexpected plan from when clause 1"
            with engine.prove('questions', 'tooth_P', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.that_is_fp: got unexpected plan from when clause 2"
                with engine.prove('questions', 'changes_insec', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.that_is_fp: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def dyk_rythm_y(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'dyk_rythm', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.dyk_rythm_y: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (1,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def dyk_rythm_n(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'dyk_rythm', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.dyk_rythm_n: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (3,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def dyk_rythm_dk(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'dyk_rythm', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.dyk_rythm_dk: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (2,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def need_cardio(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'what_do_you_need', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.need_cardio: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (1,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def need_aat(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'what_do_you_need', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.need_aat: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (2,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def need_dkwhat(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'what_do_you_need', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.need_dkwhat: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (3,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ehra_sinus(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'classification_ehra', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ehra_sinus: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (3,4,5):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ehra_czs(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'classification_ehra', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ehra_czs: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (1,2):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def sinus_controle_strategy1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.sinus_controle_strategy1: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'dyk_rythm_dk', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.sinus_controle_strategy1: got unexpected plan from when clause 2"
                with engine.prove(rule.rule_base.root_name, 'ehra_sinus', context,
                                  ()) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.sinus_controle_strategy1: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def sinus_controle_strategy2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.sinus_controle_strategy2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'dyk_rythm_y', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.sinus_controle_strategy2: got unexpected plan from when clause 2"
                with engine.prove(rule.rule_base.root_name, 'need_dkwhat', context,
                                  ()) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.sinus_controle_strategy2: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'ehra_sinus', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.sinus_controle_strategy2: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def czs_controle_strategy1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.czs_controle_strategy1: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'dyk_rythm_y', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.czs_controle_strategy1: got unexpected plan from when clause 2"
                with engine.prove(rule.rule_base.root_name, 'need_dkwhat', context,
                                  ()) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.czs_controle_strategy1: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'ehra_czs', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.czs_controle_strategy1: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def czs_controle_strategy2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.czs_controle_strategy2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'dyk_rythm_dk', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.czs_controle_strategy2: got unexpected plan from when clause 2"
                with engine.prove(rule.rule_base.root_name, 'ehra_czs', context,
                                  ()) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.czs_controle_strategy2: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def czs_controle_strategy3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.czs_controle_strategy3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'dyk_rythm_n', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.czs_controle_strategy3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_czs_end1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_czs_end1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_czs_end1: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_czs_end2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_czs_end2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_czs_end2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_czs_end3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_czs_end3: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_czs_end3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg11: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg11: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg11: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg11: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg21: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg21: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg21: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg21: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg31: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg31: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg31: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg31: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg12: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg12: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg12: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg12: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_digo_vera', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_beta_smekg12: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg22: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg22: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg22: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg22: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_digo_vera', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_beta_smekg22: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg32: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg32: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg32: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg32: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_digo_vera', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_beta_smekg32: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg13: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg13: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg13: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg13: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg23: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg23: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg23: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg23: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg33: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg33: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg33: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg33: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg14: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg14: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg14: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg14: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_amio', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_beta_smekg14: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg24: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg24: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg24: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg24: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_amio', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_beta_smekg24: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_beta_smekg34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_beta_smekg34: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_beta_smekg34: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_beta_smekg34: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_beta_smekg34: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_amio', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_beta_smekg34: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_ablacion11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_ablacion11: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_ablacion11: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_ablacion11: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_ablacion11: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_digo_vera', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_ablacion11: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_ablacion21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_ablacion21: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_ablacion21: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_ablacion21: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_ablacion21: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_digo_vera', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_ablacion21: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_ablacion31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_ablacion31: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_ablacion31: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_ablacion31: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'beta_vera', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_ablacion31: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_digo_vera', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_ablacion31: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_ablacion12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_ablacion12: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_ablacion12: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_ablacion12: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_ablacion12: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_amio', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_ablacion12: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_ablacion22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_ablacion22: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_ablacion22: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_ablacion22: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_ablacion22: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_amio', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_ablacion22: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_ablacion32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'czs_controle_strategy3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_ablacion32: got unexpected plan from when clause 1"
            with engine.prove('questions', 'czs_times', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_ablacion32: got unexpected plan from when clause 2"
                with engine.prove('questions', 'fb_inpercent', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_ablacion32: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'digo_beta', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_ablacion32: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'add_amio', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_ablacion32: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def go_to_cardio1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.go_to_cardio1: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'dyk_rythm_y', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.go_to_cardio1: got unexpected plan from when clause 2"
                with engine.prove(rule.rule_base.root_name, 'need_cardio', context,
                                  ()) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.go_to_cardio1: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def go_to_cardio2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.go_to_cardio2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'sinus_controle_strategy1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.go_to_cardio2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def go_to_cardio3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.go_to_cardio3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'sinus_controle_strategy2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.go_to_cardio3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_immidcardio1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'go_to_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_immidcardio1: got unexpected plan from when clause 1"
            notany259_worked = True
            with engine.prove('questions', 'arterio_gipo', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_immidcardio1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'sinko_presinko', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_immidcardio1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'ishemia_miokarda', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_immidcardio1: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'nedost', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_immidcardio1: got unexpected plan from when clause 5"
                            notany259_worked = False
                            if not notany259_worked: break
                        if not notany259_worked: break
                    if not notany259_worked: break
                if not notany259_worked: break
            if notany259_worked:
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_immidcardio2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'go_to_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_immidcardio2: got unexpected plan from when clause 1"
            notany268_worked = True
            with engine.prove('questions', 'arterio_gipo', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_immidcardio2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'sinko_presinko', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_immidcardio2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'ishemia_miokarda', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_immidcardio2: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'nedost', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_immidcardio2: got unexpected plan from when clause 5"
                            notany268_worked = False
                            if not notany268_worked: break
                        if not notany268_worked: break
                    if not notany268_worked: break
                if not notany268_worked: break
            if notany268_worked:
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_immidcardio3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'go_to_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_immidcardio3: got unexpected plan from when clause 1"
            notany277_worked = True
            with engine.prove('questions', 'arterio_gipo', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_immidcardio3: got unexpected plan from when clause 2"
                with engine.prove('questions', 'sinko_presinko', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_immidcardio3: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'ishemia_miokarda', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.what_therapy_immidcardio3: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'nedost', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.what_therapy_immidcardio3: got unexpected plan from when clause 5"
                            notany277_worked = False
                            if not notany277_worked: break
                        if not notany277_worked: break
                    if not notany277_worked: break
                if not notany277_worked: break
            if notany277_worked:
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def plan_cardio1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'go_to_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.plan_cardio1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'arterio_gipo', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.plan_cardio1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'sinko_presinko', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.plan_cardio1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'ishemia_miokarda', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.plan_cardio1: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'nedost', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.plan_cardio1: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def plan_cardio2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'go_to_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.plan_cardio2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'arterio_gipo', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.plan_cardio2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'sinko_presinko', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.plan_cardio2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'ishemia_miokarda', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.plan_cardio2: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'nedost', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.plan_cardio2: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def plan_cardio3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'go_to_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.plan_cardio3: got unexpected plan from when clause 1"
            with engine.prove('questions', 'arterio_gipo', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.plan_cardio3: got unexpected plan from when clause 2"
                with engine.prove('questions', 'sinko_presinko', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.plan_cardio3: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'ishemia_miokarda', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.plan_cardio3: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'nedost', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.plan_cardio3: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def gepa_enko(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'vipoln_a', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.gepa_enko: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (1,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def fast_coago(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'vipoln_b', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.fast_coago: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (1,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def long_anticoago(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'vipoln_c', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.long_anticoago: got unexpected plan from when clause 1"
            if context.lookup_data('ans') in (1,):
              rule.rule_base.num_bc_rule_successes += 1
              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg11: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg11: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg11: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg11: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg12: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg12: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg12: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg12: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'risk_teo', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.cpehokg12: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg13: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg13: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg13: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg13: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg14: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg14: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg14: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg14: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'risk_teo', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.cpehokg14: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg15: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg15: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg15: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg15: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg16: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg16: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg16: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg16: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'risk_teo', context,
                                          (rule.pattern(0),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.cpehokg16: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg21: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg21: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg21: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'gepa_enko', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg21: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg22: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg22: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg22: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'gepa_enko', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg22: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg23: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg23: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg23: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'gepa_enko', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg23: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg31: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg31: got unexpected plan from when clause 2"
                with engine.prove('questions', 'early_cardio', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg31: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'fast_coago', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg31: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg32: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg32: got unexpected plan from when clause 2"
                with engine.prove('questions', 'early_cardio', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg32: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'fast_coago', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg32: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg33: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg33: got unexpected plan from when clause 2"
                with engine.prove('questions', 'early_cardio', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg33: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'fast_coago', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg33: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg41: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg41: got unexpected plan from when clause 2"
                with engine.prove('questions', 'early_cardio', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg41: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'long_anticoago', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg41: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg42: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg42: got unexpected plan from when clause 2"
                with engine.prove('questions', 'early_cardio', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg42: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'long_anticoago', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg42: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cpehokg43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cpehokg43: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cpehokg43: got unexpected plan from when clause 2"
                with engine.prove('questions', 'early_cardio', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cpehokg43: got unexpected plan from when clause 3"
                    with engine.prove(rule.rule_base.root_name, 'long_anticoago', context,
                                      ()) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cpehokg43: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs1: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs2: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs3: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs3: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs3: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs4: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs4: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs4: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs5: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs5: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs5: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs6: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs6: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs6: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs7: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs7: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs7: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs8: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs8: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs8: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs9: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs9: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs9: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs10: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs10: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs10: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs11: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs11: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs11: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs12: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs12: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs12: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg41', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs13: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs13: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs13: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg42', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs14: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs14: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs14: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def what_therapy_controle_czs15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg43', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.what_therapy_controle_czs15: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.what_therapy_controle_czs15: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.what_therapy_controle_czs15: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cardioright1: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'risk_teo', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.cardioright1: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cardioright2: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'risk_teo', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.cardioright2: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'plan_cardio3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright3: got unexpected plan from when clause 1"
            with engine.prove('questions', 'paroksizm_length', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright3: got unexpected plan from when clause 2"
                with engine.prove('questions', 'antikoag_we', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright3: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'complaen', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.cardioright3: got unexpected plan from when clause 4"
                        with engine.prove('questions', 'risk_teo', context,
                                          (rule.pattern(1),)) \
                          as gen_5:
                          for x_5 in gen_5:
                            assert x_5 is None, \
                              "ca_rules_questions.cardioright3: got unexpected plan from when clause 5"
                            rule.rule_base.num_bc_rule_successes += 1
                            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright4: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright5: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright6: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright7: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright8: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright9: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright10: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright11: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright12: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright13: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright14: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright15: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg41', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright16: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg42', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright17: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg43', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright18: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright19: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright19: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright19: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright20: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright20: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright20: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright21: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright21: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright21: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright22: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright22: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright22: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright23: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright23: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright23: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright24: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright24: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright24: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright25: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright25: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright25: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright26: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright26: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright26: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright27: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright27: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright27: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright28: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright28: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright28: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright29: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright29: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright29: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright30: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright30: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright30: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg41', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright31: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright31: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright31: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg42', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright32: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright32: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright32: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def cardioright33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cpehokg43', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.cardioright33: got unexpected plan from when clause 1"
            with engine.prove('questions', 'left_tromb', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.cardioright33: got unexpected plan from when clause 2"
                with engine.prove('questions', 'still_left_tromb', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.cardioright33: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def elect_card_q(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        notany711_worked = True
        with engine.prove('questions', 'aap_effective', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.elect_card_q: got unexpected plan from when clause 1"
            with engine.prove('questions', 'aap_nelza', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.elect_card_q: got unexpected plan from when clause 2"
                with engine.prove('questions', 'pacient_wants', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.elect_card_q: got unexpected plan from when clause 3"
                    notany711_worked = False
                    if not notany711_worked: break
                if not notany711_worked: break
            if not notany711_worked: break
        if notany711_worked:
          rule.rule_base.num_bc_rule_successes += 1
          yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio1: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio1: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'elect_card_q', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def quest_false(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove('questions', 'aap_effective', context,
                          (rule.pattern(0),)) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.quest_false: got unexpected plan from when clause 1"
            with engine.prove('questions', 'aap_nelza', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.quest_false: got unexpected plan from when clause 2"
                with engine.prove('questions', 'pacient_wants', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.quest_false: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_refr(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'quest_false', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_refr: got unexpected plan from when clause 1"
            with engine.prove('questions', 'structural_piks', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_refr: got unexpected plan from when clause 2"
                with engine.prove('questions', 'vip_a', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_refr: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (1,):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_refr_electro(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'amio_refr', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_refr_electro: got unexpected plan from when clause 1"
            with engine.prove('questions', 'therapy_is_effective', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_refr_electro: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_os(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'quest_false', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_os: got unexpected plan from when clause 1"
            with engine.prove('questions', 'structural_piks', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_os: got unexpected plan from when clause 2"
                with engine.prove('questions', 'vip_b', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.propa_os: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (1,):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_os_electro(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'propa_os', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_os_electro: got unexpected plan from when clause 1"
            with engine.prove('questions', 'therapy_is_effective', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_os_electro: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio68(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio68: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio68: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio69(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio69: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio69: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio70(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio70: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio70: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio71(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio71: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio71: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio72(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio72: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio72: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio73(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio73: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio73: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio74(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio74: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio74: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio75(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio75: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio75: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio76(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio76: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio76: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio77(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio77: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio77: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio78(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio78: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio78: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio79(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio79: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio79: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio80(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio80: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio80: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio81(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio81: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio81: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio82(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio82: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio82: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio83(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio83: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio83: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio84(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio84: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio84: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio85(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio85: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio85: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio86(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio86: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio86: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio87(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio87: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio87: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio88(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio88: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio88: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio89(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio89: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio89: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio90(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio90: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio90: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio91(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio91: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio91: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio92(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio92: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio92: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio93(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio93: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio93: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio94(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio94: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio94: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio95(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio95: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio95: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio96(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio96: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio96: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio97(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio97: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio97: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio98(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio98: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio98: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio99(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio99: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio99: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio100(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio100: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio100: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio101(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio101: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio101: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio102(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio102: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio102: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio103(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio103: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio103: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio104(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio104: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio104: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio105(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio105: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio105: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def electrocardio106(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.electrocardio106: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_electro', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.electrocardio106: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_refr_aat(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'amio_refr', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_refr_aat: got unexpected plan from when clause 1"
            with engine.prove('questions', 'therapy_is_effective', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_refr_aat: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_refr_ablacia(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'amio_refr_aat', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_refr_ablacia: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_refr_ablacia: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_os_aat(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'propa_os', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_os_aat: got unexpected plan from when clause 1"
            with engine.prove('questions', 'therapy_is_effective', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_os_aat: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_os_ablacia(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'propa_os_aat', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_os_ablacia: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_os_ablacia: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'that_is_fp', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'dyk_rythm_y', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep: got unexpected plan from when clause 2"
                with engine.prove(rule.rule_base.root_name, 'need_aat', context,
                                  ()) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia1: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_refr_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ablacia67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ablacia67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_os_ablacia', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ablacia67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ehra_beta_adreno1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'amio_refr_aat', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ehra_beta_adreno1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ehra_beta_adreno1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'ehra_two', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.ehra_beta_adreno1: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (1,2):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ehra_beta_adreno2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'propa_os_aat', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ehra_beta_adreno2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ehra_beta_adreno2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'ehra_two', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.ehra_beta_adreno2: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (1,2):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ehra_aat1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'amio_refr_aat', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ehra_aat1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ehra_aat1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'ehra_two', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.ehra_aat1: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (3,4,5):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def ehra_aat2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'propa_os_aat', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.ehra_aat2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.ehra_aat2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'ehra_two', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.ehra_aat2: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (3,4,5):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep_beta(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep_beta: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep_beta: got unexpected plan from when clause 2"
                with engine.prove('questions', 'ehra_two', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep_beta: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (1,2):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep_aap(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep_aap: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep_aap: got unexpected plan from when clause 2"
                with engine.prove('questions', 'ehra_two', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep_aap: got unexpected plan from when clause 3"
                    if context.lookup_data('ans') in (3,4,5):
                      rule.rule_base.num_bc_rule_successes += 1
                      yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_beta', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def beta_adreno67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.beta_adreno67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'ehra_beta_adreno2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.beta_adreno67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amiodaron_eff', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_eff1: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amiodaron_eff', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_eff2: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_eff3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_eff3: got unexpected plan from when clause 1"
            with engine.prove('questions', 'invaz_vmesh', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_eff3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_ne_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_ne_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_ne_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_ne_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amiodaron_eff', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_ne_eff1: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_ne_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_ne_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_ne_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_ne_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amiodaron_eff', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_ne_eff2: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_sota_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_sota_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_sota_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_sota_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amio_sota_eff', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_sota_eff1: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_sota_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_sota_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_sota_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_sota_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amio_sota_eff', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_sota_eff2: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_sota_ne_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_sota_ne_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_sota_ne_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_sota_ne_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amio_sota_eff', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_sota_ne_eff1: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def amio_sota_ne_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.amio_sota_ne_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.amio_sota_ne_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.amio_sota_ne_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amio_sota_eff', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.amio_sota_ne_eff2: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def consult_aritm1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.consult_aritm1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.consult_aritm1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.consult_aritm1: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def consult_aritm2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.consult_aritm2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.consult_aritm2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.consult_aritm2: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amiodaron_eff', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep1: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amiodaron_eff', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep2: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep3: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep3: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep3: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amio_sota_eff', context,
                                      (rule.pattern(0),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep3: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep4: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep4: got unexpected plan from when clause 2"
                with engine.prove('questions', 'hsn_or_fvlz', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep4: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'amio_sota_eff', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep4: got unexpected plan from when clause 4"
                        rule.rule_base.num_bc_rule_successes += 1
                        yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep5: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep5: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(1),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep5: got unexpected plan from when clause 3"
                    rule.rule_base.num_bc_rule_successes += 1
                    yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep6: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep6: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep6: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep6: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (1,):
                          with engine.prove('questions', 'propa_eta', context,
                                            (rule.pattern(2),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.antiprep6: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep7: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep7: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep7: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep7: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (1,):
                          with engine.prove('questions', 'propa_eta', context,
                                            (rule.pattern(0),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.antiprep7: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep8: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep8: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep8: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep8: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (2,):
                          with engine.prove('questions', 'eta_alla', context,
                                            (rule.pattern(2),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.antiprep8: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def antiprep9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep_aap', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.antiprep9: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.antiprep9: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.antiprep9: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.antiprep9: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (2,):
                          with engine.prove('questions', 'eta_alla', context,
                                            (rule.pattern(0),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.antiprep9: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_eta_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_eta_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_eta_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.propa_eta_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.propa_eta_eff1: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (1,):
                          with engine.prove('questions', 'propa_eta', context,
                                            (rule.pattern(2),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.propa_eta_eff1: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_eta_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_eta_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_eta_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.propa_eta_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.propa_eta_eff2: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (1,):
                          with engine.prove('questions', 'propa_eta', context,
                                            (rule.pattern(2),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.propa_eta_eff2: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_eta_ne_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_eta_ne_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_eta_ne_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.propa_eta_ne_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.propa_eta_ne_eff1: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (1,):
                          with engine.prove('questions', 'propa_eta', context,
                                            (rule.pattern(0),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.propa_eta_ne_eff1: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def propa_eta_ne_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.propa_eta_ne_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.propa_eta_ne_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.propa_eta_ne_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.propa_eta_ne_eff2: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (1,):
                          with engine.prove('questions', 'propa_eta', context,
                                            (rule.pattern(0),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.propa_eta_ne_eff2: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def eta_alla_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.eta_alla_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.eta_alla_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.eta_alla_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.eta_alla_eff1: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (2,):
                          with engine.prove('questions', 'eta_alla', context,
                                            (rule.pattern(2),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.eta_alla_eff1: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def eta_alla_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.eta_alla_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.eta_alla_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.eta_alla_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.eta_alla_eff2: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (2,):
                          with engine.prove('questions', 'eta_alla', context,
                                            (rule.pattern(2),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.eta_alla_eff2: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def eta_alla_ne_eff1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.eta_alla_ne_eff1: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.eta_alla_ne_eff1: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.eta_alla_ne_eff1: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.eta_alla_ne_eff1: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (2,):
                          with engine.prove('questions', 'eta_alla', context,
                                            (rule.pattern(0),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.eta_alla_ne_eff1: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def eta_alla_ne_eff2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'ehra_aat2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.eta_alla_ne_eff2: got unexpected plan from when clause 1"
            with engine.prove('questions', 'are_there_dis', context,
                              (rule.pattern(0),)) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.eta_alla_ne_eff2: got unexpected plan from when clause 2"
                with engine.prove('questions', 'spinoatr_atrioven', context,
                                  (rule.pattern(0),)) \
                  as gen_3:
                  for x_3 in gen_3:
                    assert x_3 is None, \
                      "ca_rules_questions.eta_alla_ne_eff2: got unexpected plan from when clause 3"
                    with engine.prove('questions', 'tahi_bradi', context,
                                      (rule.pattern(1),)) \
                      as gen_4:
                      for x_4 in gen_4:
                        assert x_4 is None, \
                          "ca_rules_questions.eta_alla_ne_eff2: got unexpected plan from when clause 4"
                        if context.lookup_data('ans') in (2,):
                          with engine.prove('questions', 'eta_alla', context,
                                            (rule.pattern(0),)) \
                            as gen_6:
                            for x_6 in gen_6:
                              assert x_6 is None, \
                                "ca_rules_questions.eta_alla_ne_eff2: got unexpected plan from when clause 6"
                              rule.rule_base.num_bc_rule_successes += 1
                              yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amiodaron_ne_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amiodaron_ne_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amiodaron_ne_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_amio_sota_ne_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_amio_sota_ne_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'amio_sota_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_amio_sota_ne_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_propa_eta_ne_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_propa_eta_ne_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'propa_eta_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_propa_eta_ne_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_eta_alla_ne_ok67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_eta_alla_ne_ok67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'eta_alla_ne_eff1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_eta_alla_ne_ok67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm1(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'antiprep5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm1: got unexpected plan from when clause 1"
            rule.rule_base.num_bc_rule_successes += 1
            yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm2(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm2: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm2: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm3(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm3: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm3: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm4(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm4: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm4: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm5(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm5: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm5: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm6(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm6: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm6: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm7(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm7: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm7: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm8(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm8: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm8: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm9(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm9: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm9: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm10(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm10: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm10: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm11(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm11: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm11: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm12(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm12: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm12: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm13(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm13: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm13: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm14(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm14: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm14: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm15(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm15: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm15: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm16(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm16: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm16: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm17(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm17: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm17: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm18(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm18: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm18: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm19(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm19: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm19: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm20(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm20: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm20: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm21(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm21: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm21: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm22(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm22: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm22: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm23(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm23: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm23: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm24(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm24: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm24: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm25(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm25: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm25: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm26(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm26: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm26: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm27(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm27: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm27: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm28(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm28: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm28: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm29(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm29: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm29: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm30(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm30: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm30: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm31(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm31: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm31: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm32(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm32: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm32: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm33(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm33: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm33: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm34(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm34: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm1', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm34: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm35(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright1', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm35: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm35: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm36(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright2', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm36: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm36: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm37(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright3', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm37: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm37: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm38(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright4', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm38: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm38: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm39(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright5', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm39: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm39: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm40(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright6', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm40: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm40: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm41(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright7', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm41: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm41: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm42(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright8', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm42: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm42: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm43(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright9', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm43: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm43: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm44(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright10', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm44: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm44: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm45(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright11', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm45: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm45: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm46(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright12', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm46: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm46: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm47(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright13', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm47: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm47: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm48(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright14', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm48: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm48: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm49(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright15', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm49: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm49: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm50(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright16', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm50: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm50: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm51(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright17', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm51: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm51: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm52(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright18', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm52: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm52: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm53(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright19', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm53: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm53: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm54(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright20', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm54: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm54: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm55(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright21', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm55: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm55: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm56(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright22', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm56: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm56: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm57(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright23', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm57: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm57: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm58(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright24', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm58: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm58: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm59(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright25', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm59: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm59: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm60(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright26', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm60: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm60: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm61(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright27', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm61: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm61: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm62(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright28', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm62: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm62: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm63(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright29', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm63: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm63: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm64(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright30', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm64: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm64: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm65(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright31', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm65: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm65: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm66(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright32', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm66: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm66: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def therapy_consult_aritm67(rule, arg_patterns, arg_context):
  engine = rule.rule_base.engine
  patterns = rule.goal_arg_patterns()
  if len(arg_patterns) == len(patterns):
    context = contexts.bc_context(rule)
    try:
      if all(map(lambda pat, arg:
                   pat.match_pattern(context, context,
                                     arg, arg_context),
                 patterns,
                 arg_patterns)):
        rule.rule_base.num_bc_rules_matched += 1
        with engine.prove(rule.rule_base.root_name, 'cardioright33', context,
                          ()) \
          as gen_1:
          for x_1 in gen_1:
            assert x_1 is None, \
              "ca_rules_questions.therapy_consult_aritm67: got unexpected plan from when clause 1"
            with engine.prove(rule.rule_base.root_name, 'consult_aritm2', context,
                              ()) \
              as gen_2:
              for x_2 in gen_2:
                assert x_2 is None, \
                  "ca_rules_questions.therapy_consult_aritm67: got unexpected plan from when clause 2"
                rule.rule_base.num_bc_rule_successes += 1
                yield
        rule.rule_base.num_bc_rule_failures += 1
    finally:
      context.done()

def populate(engine):
  This_rule_base = engine.get_create('ca_rules_questions')
  
  bc_rule.bc_rule('no_fp', This_rule_base, 'what_therapy',
                  no_fp, None,
                  (pattern.pattern_literal("Это не фибрилляция предсердий"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('that_is_fp', This_rule_base, 'that_is_fp',
                  that_is_fp, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('dyk_rythm_y', This_rule_base, 'dyk_rythm_y',
                  dyk_rythm_y, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('dyk_rythm_n', This_rule_base, 'dyk_rythm_n',
                  dyk_rythm_n, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('dyk_rythm_dk', This_rule_base, 'dyk_rythm_dk',
                  dyk_rythm_dk, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('need_cardio', This_rule_base, 'need_cardio',
                  need_cardio, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('need_aat', This_rule_base, 'need_aat',
                  need_aat, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('need_dkwhat', This_rule_base, 'need_dkwhat',
                  need_dkwhat, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('ehra_sinus', This_rule_base, 'ehra_sinus',
                  ehra_sinus, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('ehra_czs', This_rule_base, 'ehra_czs',
                  ehra_czs, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('sinus_controle_strategy1', This_rule_base, 'sinus_controle_strategy1',
                  sinus_controle_strategy1, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('sinus_controle_strategy2', This_rule_base, 'sinus_controle_strategy2',
                  sinus_controle_strategy2, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('czs_controle_strategy1', This_rule_base, 'czs_controle_strategy1',
                  czs_controle_strategy1, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('czs_controle_strategy2', This_rule_base, 'czs_controle_strategy2',
                  czs_controle_strategy2, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('czs_controle_strategy3', This_rule_base, 'czs_controle_strategy3',
                  czs_controle_strategy3, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('what_therapy_czs_end1', This_rule_base, 'what_therapy',
                  what_therapy_czs_end1, None,
                  (pattern.pattern_literal("Урежающие ритм препараты не показаны"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_czs_end2', This_rule_base, 'what_therapy',
                  what_therapy_czs_end2, None,
                  (pattern.pattern_literal("Урежающие ритм препараты не показаны"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_czs_end3', This_rule_base, 'what_therapy',
                  what_therapy_czs_end3, None,
                  (pattern.pattern_literal("Урежающие ритм препараты не показаны"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg11', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg11, None,
                  (pattern.pattern_literal("Продолжайте терапию бета-адреноблокаторами или верапамилом с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg21', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg21, None,
                  (pattern.pattern_literal("Продолжайте терапию бета-адреноблокаторами или верапамилом с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg31', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg31, None,
                  (pattern.pattern_literal("Продолжайте терапию бета-адреноблокаторами или верапамилом с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg12', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg12, None,
                  (pattern.pattern_literal("Продолжайте терапию с добавлением дигоксина или заменой бета-адреноблокаторов на верапамил с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg22', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg22, None,
                  (pattern.pattern_literal("Продолжайте терапию с добавлением дигоксина или заменой бета-адреноблокаторов на верапамил с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg32', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg32, None,
                  (pattern.pattern_literal("Продолжайте терапию с добавлением дигоксина или заменой бета-адреноблокаторов на верапамил с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg13', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg13, None,
                  (pattern.pattern_literal("Продолжайте терапию дигоксином и бета-адреноблокаторами (начинать с малых доз) с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg23', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg23, None,
                  (pattern.pattern_literal("Продолжайте терапию дигоксином и бета-адреноблокаторами (начинать с малых доз) с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg33', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg33, None,
                  (pattern.pattern_literal("Продолжайте терапию дигоксином и бета-адреноблокаторами (начинать с малых доз) с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg14', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg14, None,
                  (pattern.pattern_literal("Продолжайте терапию с добавлением амиодарона с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg24', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg24, None,
                  (pattern.pattern_literal("Продолжайте терапию с добавлением амиодарона с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_beta_smekg34', This_rule_base, 'what_therapy',
                  what_therapy_beta_smekg34, None,
                  (pattern.pattern_literal("Продолжайте терапию с добавлением амиодарона с контролем СМЭКГ через 4 недели"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_ablacion11', This_rule_base, 'what_therapy',
                  what_therapy_ablacion11, None,
                  (pattern.pattern_literal("Аблация АВ-соединения и имплантация ЭКС"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_ablacion21', This_rule_base, 'what_therapy',
                  what_therapy_ablacion21, None,
                  (pattern.pattern_literal("Аблация АВ-соединения и имплантация ЭКС"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_ablacion31', This_rule_base, 'what_therapy',
                  what_therapy_ablacion31, None,
                  (pattern.pattern_literal("Аблация АВ-соединения и имплантация ЭКС"),),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_ablacion12', This_rule_base, 'what_therapy',
                  what_therapy_ablacion12, None,
                  (pattern.pattern_literal("Аблация АВ-соединения и имплантация ЭКС"),),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('what_therapy_ablacion22', This_rule_base, 'what_therapy',
                  what_therapy_ablacion22, None,
                  (pattern.pattern_literal("Аблация АВ-соединения и имплантация ЭКС"),),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('what_therapy_ablacion32', This_rule_base, 'what_therapy',
                  what_therapy_ablacion32, None,
                  (pattern.pattern_literal("Аблация АВ-соединения и имплантация ЭКС"),),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('go_to_cardio1', This_rule_base, 'go_to_cardio1',
                  go_to_cardio1, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('go_to_cardio2', This_rule_base, 'go_to_cardio2',
                  go_to_cardio2, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('go_to_cardio3', This_rule_base, 'go_to_cardio3',
                  go_to_cardio3, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('what_therapy_immidcardio1', This_rule_base, 'what_therapy',
                  what_therapy_immidcardio1, None,
                  (pattern.pattern_literal("Пациенту показана экстренная наружная электрическая кардиоверсия (дефибрилляция)"),),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('what_therapy_immidcardio2', This_rule_base, 'what_therapy',
                  what_therapy_immidcardio2, None,
                  (pattern.pattern_literal("Пациенту показана экстренная наружная электрическая кардиоверсия (дефибрилляция)"),),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('what_therapy_immidcardio3', This_rule_base, 'what_therapy',
                  what_therapy_immidcardio3, None,
                  (pattern.pattern_literal("Пациенту показана экстренная наружная электрическая кардиоверсия (дефибрилляция)"),),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('plan_cardio1', This_rule_base, 'plan_cardio1',
                  plan_cardio1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('plan_cardio2', This_rule_base, 'plan_cardio2',
                  plan_cardio2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('plan_cardio3', This_rule_base, 'plan_cardio3',
                  plan_cardio3, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('gepa_enko', This_rule_base, 'gepa_enko',
                  gepa_enko, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('fast_coago', This_rule_base, 'fast_coago',
                  fast_coago, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('long_anticoago', This_rule_base, 'long_anticoago',
                  long_anticoago, None,
                  (),
                  (),
                  (contexts.variable('ans'),))
  
  bc_rule.bc_rule('cpehokg11', This_rule_base, 'cpehokg11',
                  cpehokg11, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('cpehokg12', This_rule_base, 'cpehokg12',
                  cpehokg12, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg13', This_rule_base, 'cpehokg13',
                  cpehokg13, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('cpehokg14', This_rule_base, 'cpehokg14',
                  cpehokg14, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg15', This_rule_base, 'cpehokg15',
                  cpehokg15, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('cpehokg16', This_rule_base, 'cpehokg16',
                  cpehokg16, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg21', This_rule_base, 'cpehokg21',
                  cpehokg21, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg22', This_rule_base, 'cpehokg22',
                  cpehokg22, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg23', This_rule_base, 'cpehokg23',
                  cpehokg23, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg31', This_rule_base, 'cpehokg31',
                  cpehokg31, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('cpehokg32', This_rule_base, 'cpehokg32',
                  cpehokg32, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('cpehokg33', This_rule_base, 'cpehokg33',
                  cpehokg33, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('cpehokg41', This_rule_base, 'cpehokg41',
                  cpehokg41, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg42', This_rule_base, 'cpehokg42',
                  cpehokg42, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cpehokg43', This_rule_base, 'cpehokg43',
                  cpehokg43, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('what_therapy_controle_czs1', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs1, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs2', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs2, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs3', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs3, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs4', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs4, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs5', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs5, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs6', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs6, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs7', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs7, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs8', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs8, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs9', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs9, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs10', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs10, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs11', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs11, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs12', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs12, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs13', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs13, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs14', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs14, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('what_therapy_controle_czs15', This_rule_base, 'what_therapy',
                  what_therapy_controle_czs15, None,
                  (pattern.pattern_literal("Предпочесть тактику контроля ЧЖС"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('cardioright1', This_rule_base, 'cardioright1',
                  cardioright1, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright2', This_rule_base, 'cardioright2',
                  cardioright2, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright3', This_rule_base, 'cardioright3',
                  cardioright3, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright4', This_rule_base, 'cardioright4',
                  cardioright4, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright5', This_rule_base, 'cardioright5',
                  cardioright5, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright6', This_rule_base, 'cardioright6',
                  cardioright6, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright7', This_rule_base, 'cardioright7',
                  cardioright7, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright8', This_rule_base, 'cardioright8',
                  cardioright8, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright9', This_rule_base, 'cardioright9',
                  cardioright9, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright10', This_rule_base, 'cardioright10',
                  cardioright10, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright11', This_rule_base, 'cardioright11',
                  cardioright11, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright12', This_rule_base, 'cardioright12',
                  cardioright12, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright13', This_rule_base, 'cardioright13',
                  cardioright13, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright14', This_rule_base, 'cardioright14',
                  cardioright14, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright15', This_rule_base, 'cardioright15',
                  cardioright15, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright16', This_rule_base, 'cardioright16',
                  cardioright16, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright17', This_rule_base, 'cardioright17',
                  cardioright17, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright18', This_rule_base, 'cardioright18',
                  cardioright18, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright19', This_rule_base, 'cardioright19',
                  cardioright19, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright20', This_rule_base, 'cardioright20',
                  cardioright20, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright21', This_rule_base, 'cardioright21',
                  cardioright21, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright22', This_rule_base, 'cardioright22',
                  cardioright22, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright23', This_rule_base, 'cardioright23',
                  cardioright23, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright24', This_rule_base, 'cardioright24',
                  cardioright24, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright25', This_rule_base, 'cardioright10',
                  cardioright25, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright26', This_rule_base, 'cardioright26',
                  cardioright26, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright27', This_rule_base, 'cardioright27',
                  cardioright27, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright28', This_rule_base, 'cardioright28',
                  cardioright28, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright29', This_rule_base, 'cardioright29',
                  cardioright29, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright30', This_rule_base, 'cardioright30',
                  cardioright30, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright31', This_rule_base, 'cardioright31',
                  cardioright31, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright32', This_rule_base, 'cardioright32',
                  cardioright32, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('cardioright33', This_rule_base, 'cardioright33',
                  cardioright33, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('elect_card_q', This_rule_base, 'elect_card_q',
                  elect_card_q, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('electrocardio1', This_rule_base, 'what_therapy',
                  electrocardio1, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio2', This_rule_base, 'what_therapy',
                  electrocardio2, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio3', This_rule_base, 'what_therapy',
                  electrocardio3, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio4', This_rule_base, 'what_therapy',
                  electrocardio4, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio5', This_rule_base, 'what_therapy',
                  electrocardio5, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio6', This_rule_base, 'what_therapy',
                  electrocardio6, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio7', This_rule_base, 'what_therapy',
                  electrocardio7, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio8', This_rule_base, 'what_therapy',
                  electrocardio8, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio9', This_rule_base, 'what_therapy',
                  electrocardio9, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio10', This_rule_base, 'what_therapy',
                  electrocardio10, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio11', This_rule_base, 'what_therapy',
                  electrocardio11, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio12', This_rule_base, 'what_therapy',
                  electrocardio12, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio13', This_rule_base, 'what_therapy',
                  electrocardio13, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio14', This_rule_base, 'what_therapy',
                  electrocardio14, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio15', This_rule_base, 'what_therapy',
                  electrocardio15, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio16', This_rule_base, 'what_therapy',
                  electrocardio16, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio17', This_rule_base, 'what_therapy',
                  electrocardio17, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio18', This_rule_base, 'what_therapy',
                  electrocardio18, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio19', This_rule_base, 'what_therapy',
                  electrocardio19, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio20', This_rule_base, 'what_therapy',
                  electrocardio20, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio21', This_rule_base, 'what_therapy',
                  electrocardio21, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio22', This_rule_base, 'what_therapy',
                  electrocardio22, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio23', This_rule_base, 'what_therapy',
                  electrocardio23, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio24', This_rule_base, 'what_therapy',
                  electrocardio24, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio25', This_rule_base, 'what_therapy',
                  electrocardio25, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio26', This_rule_base, 'what_therapy',
                  electrocardio26, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio27', This_rule_base, 'what_therapy',
                  electrocardio27, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio28', This_rule_base, 'what_therapy',
                  electrocardio28, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio29', This_rule_base, 'what_therapy',
                  electrocardio29, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio30', This_rule_base, 'what_therapy',
                  electrocardio30, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio31', This_rule_base, 'what_therapy',
                  electrocardio31, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio32', This_rule_base, 'what_therapy',
                  electrocardio32, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio33', This_rule_base, 'what_therapy',
                  electrocardio33, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('quest_false', This_rule_base, 'quest_false',
                  quest_false, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('amio_refr', This_rule_base, 'amio_refr',
                  amio_refr, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('amio_refr_electro', This_rule_base, 'amio_refr_electro',
                  amio_refr_electro, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('propa_os', This_rule_base, 'propa_os',
                  propa_os, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('propa_os_electro', This_rule_base, 'propa_os_electro',
                  propa_os_electro, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('electrocardio41', This_rule_base, 'what_therapy',
                  electrocardio41, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio42', This_rule_base, 'what_therapy',
                  electrocardio42, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio43', This_rule_base, 'what_therapy',
                  electrocardio43, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio44', This_rule_base, 'what_therapy',
                  electrocardio44, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio45', This_rule_base, 'what_therapy',
                  electrocardio45, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio46', This_rule_base, 'what_therapy',
                  electrocardio46, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio47', This_rule_base, 'what_therapy',
                  electrocardio47, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio48', This_rule_base, 'what_therapy',
                  electrocardio48, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio49', This_rule_base, 'what_therapy',
                  electrocardio49, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio50', This_rule_base, 'what_therapy',
                  electrocardio50, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio51', This_rule_base, 'what_therapy',
                  electrocardio51, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio52', This_rule_base, 'what_therapy',
                  electrocardio52, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio53', This_rule_base, 'what_therapy',
                  electrocardio53, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio54', This_rule_base, 'what_therapy',
                  electrocardio54, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio55', This_rule_base, 'what_therapy',
                  electrocardio55, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio56', This_rule_base, 'what_therapy',
                  electrocardio56, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio57', This_rule_base, 'what_therapy',
                  electrocardio57, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio58', This_rule_base, 'what_therapy',
                  electrocardio58, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio59', This_rule_base, 'what_therapy',
                  electrocardio59, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio60', This_rule_base, 'what_therapy',
                  electrocardio60, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio61', This_rule_base, 'what_therapy',
                  electrocardio61, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio62', This_rule_base, 'what_therapy',
                  electrocardio62, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio63', This_rule_base, 'what_therapy',
                  electrocardio63, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio64', This_rule_base, 'what_therapy',
                  electrocardio64, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio65', This_rule_base, 'what_therapy',
                  electrocardio65, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio66', This_rule_base, 'what_therapy',
                  electrocardio66, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio67', This_rule_base, 'what_therapy',
                  electrocardio67, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio68', This_rule_base, 'what_therapy',
                  electrocardio68, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio69', This_rule_base, 'what_therapy',
                  electrocardio69, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio70', This_rule_base, 'what_therapy',
                  electrocardio70, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio71', This_rule_base, 'what_therapy',
                  electrocardio71, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio72', This_rule_base, 'what_therapy',
                  electrocardio72, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio73', This_rule_base, 'what_therapy',
                  electrocardio73, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio74', This_rule_base, 'what_therapy',
                  electrocardio74, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio75', This_rule_base, 'what_therapy',
                  electrocardio75, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio76', This_rule_base, 'what_therapy',
                  electrocardio76, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio77', This_rule_base, 'what_therapy',
                  electrocardio77, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio78', This_rule_base, 'what_therapy',
                  electrocardio78, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio79', This_rule_base, 'what_therapy',
                  electrocardio79, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio80', This_rule_base, 'what_therapy',
                  electrocardio80, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio81', This_rule_base, 'what_therapy',
                  electrocardio81, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio82', This_rule_base, 'what_therapy',
                  electrocardio82, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio83', This_rule_base, 'what_therapy',
                  electrocardio83, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio84', This_rule_base, 'what_therapy',
                  electrocardio84, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio85', This_rule_base, 'what_therapy',
                  electrocardio85, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio86', This_rule_base, 'what_therapy',
                  electrocardio86, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio87', This_rule_base, 'what_therapy',
                  electrocardio87, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio88', This_rule_base, 'what_therapy',
                  electrocardio88, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio89', This_rule_base, 'what_therapy',
                  electrocardio89, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio90', This_rule_base, 'what_therapy',
                  electrocardio90, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio91', This_rule_base, 'what_therapy',
                  electrocardio91, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio92', This_rule_base, 'what_therapy',
                  electrocardio92, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio93', This_rule_base, 'what_therapy',
                  electrocardio93, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio94', This_rule_base, 'what_therapy',
                  electrocardio94, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio95', This_rule_base, 'what_therapy',
                  electrocardio95, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio96', This_rule_base, 'what_therapy',
                  electrocardio96, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio97', This_rule_base, 'what_therapy',
                  electrocardio97, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio98', This_rule_base, 'what_therapy',
                  electrocardio98, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio99', This_rule_base, 'what_therapy',
                  electrocardio99, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio100', This_rule_base, 'what_therapy',
                  electrocardio100, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio101', This_rule_base, 'what_therapy',
                  electrocardio101, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio102', This_rule_base, 'what_therapy',
                  electrocardio102, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio103', This_rule_base, 'what_therapy',
                  electrocardio103, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio104', This_rule_base, 'what_therapy',
                  electrocardio104, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio105', This_rule_base, 'what_therapy',
                  electrocardio105, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('electrocardio106', This_rule_base, 'what_therapy',
                  electrocardio106, None,
                  (pattern.pattern_literal("Проведение электрической кардиоверсии"),),
                  (),
                  ())
  
  bc_rule.bc_rule('amio_refr_aat', This_rule_base, 'amio_refr_aat',
                  amio_refr_aat, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('amio_refr_ablacia', This_rule_base, 'amio_refr_ablacia',
                  amio_refr_ablacia, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('propa_os_aat', This_rule_base, 'propa_os_aat',
                  propa_os_aat, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('propa_os_ablacia', This_rule_base, 'propa_os_ablacia',
                  propa_os_ablacia, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('antiprep', This_rule_base, 'antiprep',
                  antiprep, None,
                  (),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia1', This_rule_base, 'what_therapy',
                  ablacia1, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('ablacia2', This_rule_base, 'what_therapy',
                  ablacia2, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia3', This_rule_base, 'what_therapy',
                  ablacia3, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia4', This_rule_base, 'what_therapy',
                  ablacia4, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia5', This_rule_base, 'what_therapy',
                  ablacia5, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia6', This_rule_base, 'what_therapy',
                  ablacia6, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia7', This_rule_base, 'what_therapy',
                  ablacia7, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia8', This_rule_base, 'what_therapy',
                  ablacia8, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia9', This_rule_base, 'what_therapy',
                  ablacia9, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia10', This_rule_base, 'what_therapy',
                  ablacia10, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia11', This_rule_base, 'what_therapy',
                  ablacia11, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia12', This_rule_base, 'what_therapy',
                  ablacia12, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia13', This_rule_base, 'what_therapy',
                  ablacia13, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia14', This_rule_base, 'what_therapy',
                  ablacia14, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia15', This_rule_base, 'what_therapy',
                  ablacia15, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia16', This_rule_base, 'what_therapy',
                  ablacia16, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia17', This_rule_base, 'what_therapy',
                  ablacia17, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia18', This_rule_base, 'what_therapy',
                  ablacia18, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia19', This_rule_base, 'what_therapy',
                  ablacia19, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia20', This_rule_base, 'what_therapy',
                  ablacia20, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia21', This_rule_base, 'what_therapy',
                  ablacia21, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia22', This_rule_base, 'what_therapy',
                  ablacia22, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia23', This_rule_base, 'what_therapy',
                  ablacia23, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia24', This_rule_base, 'what_therapy',
                  ablacia24, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia25', This_rule_base, 'what_therapy',
                  ablacia25, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia26', This_rule_base, 'what_therapy',
                  ablacia26, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia27', This_rule_base, 'what_therapy',
                  ablacia27, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia28', This_rule_base, 'what_therapy',
                  ablacia28, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia29', This_rule_base, 'what_therapy',
                  ablacia29, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia30', This_rule_base, 'what_therapy',
                  ablacia30, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia31', This_rule_base, 'what_therapy',
                  ablacia31, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia32', This_rule_base, 'what_therapy',
                  ablacia32, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia33', This_rule_base, 'what_therapy',
                  ablacia33, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia34', This_rule_base, 'what_therapy',
                  ablacia34, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia35', This_rule_base, 'what_therapy',
                  ablacia35, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia36', This_rule_base, 'what_therapy',
                  ablacia36, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia37', This_rule_base, 'what_therapy',
                  ablacia37, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia38', This_rule_base, 'what_therapy',
                  ablacia38, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia39', This_rule_base, 'what_therapy',
                  ablacia39, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia40', This_rule_base, 'what_therapy',
                  ablacia40, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia41', This_rule_base, 'what_therapy',
                  ablacia41, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia42', This_rule_base, 'what_therapy',
                  ablacia42, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia43', This_rule_base, 'what_therapy',
                  ablacia43, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia44', This_rule_base, 'what_therapy',
                  ablacia44, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia45', This_rule_base, 'what_therapy',
                  ablacia45, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia46', This_rule_base, 'what_therapy',
                  ablacia46, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia47', This_rule_base, 'what_therapy',
                  ablacia47, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia48', This_rule_base, 'what_therapy',
                  ablacia48, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia49', This_rule_base, 'what_therapy',
                  ablacia49, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia50', This_rule_base, 'what_therapy',
                  ablacia50, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia51', This_rule_base, 'what_therapy',
                  ablacia51, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia52', This_rule_base, 'what_therapy',
                  ablacia52, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia53', This_rule_base, 'what_therapy',
                  ablacia53, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia54', This_rule_base, 'what_therapy',
                  ablacia54, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia55', This_rule_base, 'what_therapy',
                  ablacia55, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia56', This_rule_base, 'what_therapy',
                  ablacia56, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia57', This_rule_base, 'what_therapy',
                  ablacia57, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia58', This_rule_base, 'what_therapy',
                  ablacia58, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia59', This_rule_base, 'what_therapy',
                  ablacia59, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia60', This_rule_base, 'what_therapy',
                  ablacia60, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia61', This_rule_base, 'what_therapy',
                  ablacia61, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia62', This_rule_base, 'what_therapy',
                  ablacia62, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia63', This_rule_base, 'what_therapy',
                  ablacia63, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia64', This_rule_base, 'what_therapy',
                  ablacia64, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia65', This_rule_base, 'what_therapy',
                  ablacia65, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia66', This_rule_base, 'what_therapy',
                  ablacia66, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ablacia67', This_rule_base, 'what_therapy',
                  ablacia67, None,
                  (pattern.pattern_literal("Проведение аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('ehra_beta_adreno1', This_rule_base, 'ehra_beta_adreno1',
                  ehra_beta_adreno1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('ehra_beta_adreno2', This_rule_base, 'ehra_beta_adreno2',
                  ehra_beta_adreno2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('ehra_aat1', This_rule_base, 'ehra_aat1',
                  ehra_aat1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('ehra_aat2', This_rule_base, 'ehra_aat2',
                  ehra_aat2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('antiprep_beta', This_rule_base, 'antiprep_beta',
                  antiprep_beta, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('antiprep_aap', This_rule_base, 'antiprep_aap',
                  antiprep_aap, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('beta_adreno1', This_rule_base, 'what_therapy',
                  beta_adreno1, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno2', This_rule_base, 'what_therapy',
                  beta_adreno2, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno3', This_rule_base, 'what_therapy',
                  beta_adreno3, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno4', This_rule_base, 'what_therapy',
                  beta_adreno4, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno5', This_rule_base, 'what_therapy',
                  beta_adreno5, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno6', This_rule_base, 'what_therapy',
                  beta_adreno6, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno7', This_rule_base, 'what_therapy',
                  beta_adreno7, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno8', This_rule_base, 'what_therapy',
                  beta_adreno8, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno9', This_rule_base, 'what_therapy',
                  beta_adreno9, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno10', This_rule_base, 'what_therapy',
                  beta_adreno10, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno11', This_rule_base, 'what_therapy',
                  beta_adreno11, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno12', This_rule_base, 'what_therapy',
                  beta_adreno12, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno13', This_rule_base, 'what_therapy',
                  beta_adreno13, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno14', This_rule_base, 'what_therapy',
                  beta_adreno14, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno15', This_rule_base, 'what_therapy',
                  beta_adreno15, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno16', This_rule_base, 'what_therapy',
                  beta_adreno16, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno17', This_rule_base, 'what_therapy',
                  beta_adreno17, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno18', This_rule_base, 'what_therapy',
                  beta_adreno18, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno19', This_rule_base, 'what_therapy',
                  beta_adreno19, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno20', This_rule_base, 'what_therapy',
                  beta_adreno20, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno21', This_rule_base, 'what_therapy',
                  beta_adreno21, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno22', This_rule_base, 'what_therapy',
                  beta_adreno22, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno23', This_rule_base, 'what_therapy',
                  beta_adreno23, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno24', This_rule_base, 'what_therapy',
                  beta_adreno24, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno25', This_rule_base, 'what_therapy',
                  beta_adreno25, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno26', This_rule_base, 'what_therapy',
                  beta_adreno26, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno27', This_rule_base, 'what_therapy',
                  beta_adreno27, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno28', This_rule_base, 'what_therapy',
                  beta_adreno28, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno29', This_rule_base, 'what_therapy',
                  beta_adreno29, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno30', This_rule_base, 'what_therapy',
                  beta_adreno30, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno31', This_rule_base, 'what_therapy',
                  beta_adreno31, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno32', This_rule_base, 'what_therapy',
                  beta_adreno32, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno33', This_rule_base, 'what_therapy',
                  beta_adreno33, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno34', This_rule_base, 'what_therapy',
                  beta_adreno34, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno35', This_rule_base, 'what_therapy',
                  beta_adreno35, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno36', This_rule_base, 'what_therapy',
                  beta_adreno36, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno37', This_rule_base, 'what_therapy',
                  beta_adreno37, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno38', This_rule_base, 'what_therapy',
                  beta_adreno38, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno39', This_rule_base, 'what_therapy',
                  beta_adreno39, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno40', This_rule_base, 'what_therapy',
                  beta_adreno40, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno41', This_rule_base, 'what_therapy',
                  beta_adreno41, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno42', This_rule_base, 'what_therapy',
                  beta_adreno42, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno43', This_rule_base, 'what_therapy',
                  beta_adreno43, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno44', This_rule_base, 'what_therapy',
                  beta_adreno44, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno45', This_rule_base, 'what_therapy',
                  beta_adreno45, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno46', This_rule_base, 'what_therapy',
                  beta_adreno46, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno47', This_rule_base, 'what_therapy',
                  beta_adreno47, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno48', This_rule_base, 'what_therapy',
                  beta_adreno48, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno49', This_rule_base, 'what_therapy',
                  beta_adreno49, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno50', This_rule_base, 'what_therapy',
                  beta_adreno50, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno51', This_rule_base, 'what_therapy',
                  beta_adreno51, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno52', This_rule_base, 'what_therapy',
                  beta_adreno52, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno53', This_rule_base, 'what_therapy',
                  beta_adreno53, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno54', This_rule_base, 'what_therapy',
                  beta_adreno54, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno55', This_rule_base, 'what_therapy',
                  beta_adreno55, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno56', This_rule_base, 'what_therapy',
                  beta_adreno56, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno57', This_rule_base, 'what_therapy',
                  beta_adreno57, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno58', This_rule_base, 'what_therapy',
                  beta_adreno58, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno59', This_rule_base, 'what_therapy',
                  beta_adreno59, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno60', This_rule_base, 'what_therapy',
                  beta_adreno60, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno61', This_rule_base, 'what_therapy',
                  beta_adreno61, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno62', This_rule_base, 'what_therapy',
                  beta_adreno62, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno63', This_rule_base, 'what_therapy',
                  beta_adreno63, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno64', This_rule_base, 'what_therapy',
                  beta_adreno64, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno65', This_rule_base, 'what_therapy',
                  beta_adreno65, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno66', This_rule_base, 'what_therapy',
                  beta_adreno66, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('beta_adreno67', This_rule_base, 'what_therapy',
                  beta_adreno67, None,
                  (pattern.pattern_literal("Бета-адреноблокаторы"),),
                  (),
                  ())
  
  bc_rule.bc_rule('amio_eff1', This_rule_base, 'amio_eff1',
                  amio_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('amio_eff2', This_rule_base, 'amio_eff2',
                  amio_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('amio_eff3', This_rule_base, 'amio_eff3',
                  amio_eff3, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('amio_ne_eff1', This_rule_base, 'amio_ne_eff1',
                  amio_ne_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('amio_ne_eff2', This_rule_base, 'amio_ne_eff2',
                  amio_ne_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('amio_sota_eff1', This_rule_base, 'amio_sota_eff1',
                  amio_sota_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('amio_sota_eff2', This_rule_base, 'amio_sota_eff2',
                  amio_sota_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('amio_sota_ne_eff1', This_rule_base, 'amio_sota_eff1',
                  amio_sota_ne_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('amio_sota_ne_eff2', This_rule_base, 'amio_sota_eff2',
                  amio_sota_ne_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('consult_aritm1', This_rule_base, 'consult_aritm1',
                  consult_aritm1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('consult_aritm2', This_rule_base, 'consult_aritm2',
                  consult_aritm2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('antiprep1', This_rule_base, 'antiprep1',
                  antiprep1, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('antiprep2', This_rule_base, 'antiprep2',
                  antiprep2, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('antiprep3', This_rule_base, 'antiprep3',
                  antiprep3, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('antiprep4', This_rule_base, 'antiprep4',
                  antiprep4, None,
                  (),
                  (),
                  (pattern.pattern_literal(True),
                   pattern.pattern_literal(False),))
  
  bc_rule.bc_rule('antiprep5', This_rule_base, 'antiprep5',
                  antiprep5, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('antiprep6', This_rule_base, 'antiprep6',
                  antiprep6, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('antiprep7', This_rule_base, 'antiprep7',
                  antiprep7, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('antiprep8', This_rule_base, 'antiprep8',
                  antiprep8, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('antiprep9', This_rule_base, 'antiprep9',
                  antiprep9, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('propa_eta_eff1', This_rule_base, 'propa_eta_eff1',
                  propa_eta_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('propa_eta_eff2', This_rule_base, 'propa_eta_eff2',
                  propa_eta_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('propa_eta_ne_eff1', This_rule_base, 'propa_eta_ne_eff1',
                  propa_eta_ne_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('propa_eta_ne_eff2', This_rule_base, 'propa_eta_ne_eff2',
                  propa_eta_ne_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('eta_alla_eff1', This_rule_base, 'eta_alla_eff1',
                  eta_alla_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('eta_alla_eff2', This_rule_base, 'eta_alla_eff2',
                  eta_alla_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),
                   pattern.pattern_literal(True),))
  
  bc_rule.bc_rule('eta_alla_ne_eff1', This_rule_base, 'eta_alla_ne_eff1',
                  eta_alla_ne_eff1, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('eta_alla_ne_eff2', This_rule_base, 'eta_alla_ne_eff2',
                  eta_alla_ne_eff2, None,
                  (),
                  (),
                  (pattern.pattern_literal(False),
                   contexts.variable('ans'),))
  
  bc_rule.bc_rule('therapy_amiodaron_ok1', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok1, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok2', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok2, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok3', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok3, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok4', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok4, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok5', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok5, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok6', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok6, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok7', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok7, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok8', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok8, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok9', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok9, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok10', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok10, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok11', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok11, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok12', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok12, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok13', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok13, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok14', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok14, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok15', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok15, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok16', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok16, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok17', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok17, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok18', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok18, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok19', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok19, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok20', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok20, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok21', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok21, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok22', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok22, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok23', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok23, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok24', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok24, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok25', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok25, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok26', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok26, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok27', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok27, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok28', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok28, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok29', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok29, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok30', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok30, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok31', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok31, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok32', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok32, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok33', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok33, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok34', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok34, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok35', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok35, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok36', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok36, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok37', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok37, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok38', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok38, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok39', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok39, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok40', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok40, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok41', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok41, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok42', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok42, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok43', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok43, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok44', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok44, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok45', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok45, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok46', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok46, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok47', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok47, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok48', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok48, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok49', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok49, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok50', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok50, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok51', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok51, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok52', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok52, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok53', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok53, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok54', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok54, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok55', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok55, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok56', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok56, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok57', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok57, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok58', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok58, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok59', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok59, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok60', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok60, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok61', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok61, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok62', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok62, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok63', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok63, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok64', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok64, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok65', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok65, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok66', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok66, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ok67', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ok67, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном с контролем ТТГ 1 раз в 6 месяцев"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok1', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok1, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok2', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok2, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok3', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok3, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok4', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok4, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok5', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok5, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok6', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok6, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok7', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok7, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok8', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok8, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok9', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok9, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok10', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok10, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok11', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok11, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok12', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok12, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok13', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok13, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok14', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok14, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok15', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok15, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok16', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok16, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok17', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok17, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok18', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok18, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok19', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok19, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok20', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok20, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok21', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok21, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok22', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok22, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok23', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok23, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok24', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok24, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok25', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok25, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok26', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok26, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok27', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok27, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok28', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok28, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok29', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok29, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok30', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok30, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok31', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok31, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok32', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok32, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok33', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok33, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok34', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok34, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok35', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok35, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok36', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok36, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok37', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok37, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok38', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok38, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok39', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok39, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok40', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok40, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok41', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok41, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok42', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok42, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok43', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok43, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok44', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok44, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok45', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok45, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok46', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok46, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok47', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok47, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok48', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok48, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok49', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok49, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok50', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok50, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok51', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok51, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok52', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok52, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok53', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok53, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok54', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok54, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok55', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok55, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok56', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok56, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok57', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok57, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok58', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok58, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok59', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok59, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok60', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok60, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok61', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok61, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok62', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok62, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok63', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok63, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok64', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok64, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok65', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok65, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok66', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok66, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amiodaron_ne_ok67', This_rule_base, 'what_therapy',
                  therapy_amiodaron_ne_ok67, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok1', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok1, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok2', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok2, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok3', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok3, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok4', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok4, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok5', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok5, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok6', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok6, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok7', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok7, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok8', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok8, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok9', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok9, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok10', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok10, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok11', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok11, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok12', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok12, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok13', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok13, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok14', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok14, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok15', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok15, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok16', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok16, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok17', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok17, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok18', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok18, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok19', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok19, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok20', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok20, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok21', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok21, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok22', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok22, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok23', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok23, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok24', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok24, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok25', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok25, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok26', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok26, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok27', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok27, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok28', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok28, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok29', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok29, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok30', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok30, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok31', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok31, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok32', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok32, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok33', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok33, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok34', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok34, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok35', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok35, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok36', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok36, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok37', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok37, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok38', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok38, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok39', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok39, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok40', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok40, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok41', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok41, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok42', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok42, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok43', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok43, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok44', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok44, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok45', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok45, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok46', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok46, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok47', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok47, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok48', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok48, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok49', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok49, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok50', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok50, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok51', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok51, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok52', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok52, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok53', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok53, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok54', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok54, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok55', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok55, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok56', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok56, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok57', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok57, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok58', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok58, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok59', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok59, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok60', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok60, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok61', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok61, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok62', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok62, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok63', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok63, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok64', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok64, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok65', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok65, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok66', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok66, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ok67', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ok67, None,
                  (pattern.pattern_literal("Продолжить терапию амиодароном или соталолом с контролем ТТГ 1 раз в 6 месяцев для амиодарона и коррегированного QT для соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok1', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok1, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok2', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok2, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok3', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok3, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok4', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok4, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok5', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok5, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok6', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok6, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok7', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok7, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok8', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok8, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok9', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok9, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok10', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok10, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok11', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok11, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok12', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok12, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok13', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok13, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok14', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok14, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok15', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok15, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok16', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok16, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok17', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok17, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok18', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok18, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok19', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok19, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok20', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok20, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok21', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok21, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok22', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok22, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok23', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok23, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok24', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok24, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok25', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok25, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok26', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok26, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok27', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok27, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok28', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok28, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok29', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok29, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok30', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok30, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok31', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok31, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok32', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok32, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok33', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok33, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok34', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok34, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok35', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok35, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok36', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok36, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok37', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok37, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok38', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok38, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok39', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok39, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok40', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok40, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok41', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok41, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok42', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok42, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok43', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok43, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok44', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok44, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok45', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok45, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok46', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok46, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok47', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok47, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok48', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok48, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok49', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok49, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok50', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok50, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok51', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok51, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok52', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok52, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok53', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok53, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok54', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok54, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok55', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok55, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok56', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok56, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok57', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok57, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok58', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok58, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok59', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok59, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok60', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok60, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok61', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok61, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok62', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok62, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok63', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok63, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok64', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok64, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok65', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok65, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok66', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok66, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_amio_sota_ne_ok67', This_rule_base, 'what_therapy',
                  therapy_amio_sota_ne_ok67, None,
                  (pattern.pattern_literal("Повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok1', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok1, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok2', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok2, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok3', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok3, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok4', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok4, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok5', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok5, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok6', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok6, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok7', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok7, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok8', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok8, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok9', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok9, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok10', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok10, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok11', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok11, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok12', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok12, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok13', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok13, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok14', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok14, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok15', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok15, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok16', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok16, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok17', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok17, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok18', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok18, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok19', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok19, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok20', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok20, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok21', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok21, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok22', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok22, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok23', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok23, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok24', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok24, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok25', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok25, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok26', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok26, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok27', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok27, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok28', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok28, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok29', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok29, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok30', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok30, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok31', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok31, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok32', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok32, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok33', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok33, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok34', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok34, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok35', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok35, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok36', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok36, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok37', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok37, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok38', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok38, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok39', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok39, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok40', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok40, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok41', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok41, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok42', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok42, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok43', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok43, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok44', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok44, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok45', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok45, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok46', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok46, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok47', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok47, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok48', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok48, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok49', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok49, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok50', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok50, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok51', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok51, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok52', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok52, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok53', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok53, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok54', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok54, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok55', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok55, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok56', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok56, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok57', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok57, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok58', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok58, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok59', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok59, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok60', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok60, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok61', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok61, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok62', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok62, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok63', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok63, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok64', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok64, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok65', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok65, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok66', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok66, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ok67', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ok67, None,
                  (pattern.pattern_literal("Продолжить терапию: пропафенон, этацизин+бета-адреноблокаторы, соталол. Контроль коррегированного QT при применении соталола"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok1', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok1, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok2', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok2, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok3', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok3, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok4', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok4, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok5', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok5, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok6', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok6, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok7', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok7, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok8', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok8, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok9', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok9, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok10', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok10, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok11', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok11, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok12', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok12, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok13', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok13, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok14', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok14, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok15', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok15, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok16', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok16, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok17', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok17, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok18', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok18, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok19', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok19, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok20', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok20, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok21', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok21, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok22', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok22, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok23', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok23, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok24', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok24, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok25', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok25, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok26', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok26, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok27', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok27, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok28', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok28, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok29', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok29, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok30', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok30, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok31', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok31, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok32', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok32, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok33', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok33, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok34', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok34, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok35', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok35, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok36', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok36, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok37', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok37, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok38', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok38, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok39', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok39, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok40', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok40, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok41', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok41, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok42', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok42, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok43', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok43, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok44', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok44, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok45', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok45, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok46', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok46, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok47', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok47, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok48', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok48, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok49', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok49, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok50', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok50, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok51', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok51, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok52', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok52, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok53', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok53, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok54', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok54, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok55', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok55, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok56', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok56, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok57', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok57, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok58', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok58, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok59', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok59, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok60', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok60, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok61', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok61, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok62', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok62, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok63', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok63, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok64', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok64, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok65', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok65, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok66', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok66, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_propa_eta_ne_ok67', This_rule_base, 'what_therapy',
                  therapy_propa_eta_ne_ok67, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok1', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok1, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok2', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok2, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok3', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok3, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok4', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok4, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok5', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok5, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok6', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok6, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok7', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok7, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok8', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok8, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok9', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok9, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok10', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok10, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok11', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok11, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok12', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok12, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok13', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok13, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok14', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok14, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok15', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok15, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok16', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok16, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok17', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok17, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok18', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok18, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok19', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok19, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok20', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok20, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok21', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok21, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok22', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok22, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok23', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok23, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok24', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok24, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok25', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok25, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok26', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok26, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok27', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok27, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok28', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok28, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok29', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok29, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok30', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok30, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok31', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok31, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok32', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok32, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok33', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok33, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok34', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok34, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok35', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok35, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok36', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok36, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok37', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok37, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok38', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok38, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok39', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok39, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok40', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok40, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok41', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok41, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok42', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok42, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok43', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok43, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok44', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok44, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok45', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok45, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok46', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok46, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok47', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok47, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok48', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok48, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok49', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok49, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok50', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok50, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok51', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok51, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok52', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok52, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok53', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok53, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok54', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok54, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok55', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok55, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok56', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok56, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok57', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok57, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok58', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok58, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok59', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok59, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok60', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok60, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok61', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok61, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok62', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok62, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok63', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok63, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok64', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok64, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok65', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok65, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok66', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok66, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ok67', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ok67, None,
                  (pattern.pattern_literal("Продолжить терапию: этацизин, аллапинин. Контроль коррегированного QT"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok1', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok1, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok2', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok2, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok3', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok3, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok4', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok4, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok5', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok5, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok6', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok6, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok7', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok7, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok8', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok8, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok9', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok9, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok10', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok10, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok11', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok11, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok12', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok12, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok13', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok13, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok14', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok14, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok15', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok15, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok16', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok16, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok17', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok17, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok18', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok18, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok19', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok19, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok20', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok20, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok21', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok21, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok22', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok22, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok23', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok23, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok24', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok24, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok25', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok25, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok26', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok26, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok27', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok27, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok28', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok28, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok29', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok29, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok30', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok30, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok31', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok31, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok32', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok32, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok33', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok33, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok34', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok34, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok35', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok35, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok36', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok36, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok37', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok37, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok38', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok38, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok39', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok39, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok40', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok40, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok41', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok41, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok42', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok42, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok43', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok43, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok44', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok44, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok45', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok45, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok46', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok46, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok47', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok47, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok48', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok48, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok49', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok49, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok50', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok50, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok51', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok51, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok52', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok52, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok53', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok53, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok54', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok54, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok55', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok55, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok56', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok56, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok57', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok57, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok58', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok58, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok59', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok59, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok60', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok60, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok61', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok61, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok62', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok62, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok63', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok63, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok64', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok64, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok65', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok65, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok66', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok66, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_eta_alla_ne_ok67', This_rule_base, 'what_therapy',
                  therapy_eta_alla_ne_ok67, None,
                  (pattern.pattern_literal("Рассмотреть выбор другого антиаритмического препарата, либо повторно рассмотреть вопрос о проведении катетерной аблации устьев лёгочных вен"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm1', This_rule_base, 'what_therapy',
                  therapy_consult_aritm1, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm2', This_rule_base, 'what_therapy',
                  therapy_consult_aritm2, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm3', This_rule_base, 'what_therapy',
                  therapy_consult_aritm3, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm4', This_rule_base, 'what_therapy',
                  therapy_consult_aritm4, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm5', This_rule_base, 'what_therapy',
                  therapy_consult_aritm5, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm6', This_rule_base, 'what_therapy',
                  therapy_consult_aritm6, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm7', This_rule_base, 'what_therapy',
                  therapy_consult_aritm7, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm8', This_rule_base, 'what_therapy',
                  therapy_consult_aritm8, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm9', This_rule_base, 'what_therapy',
                  therapy_consult_aritm9, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm10', This_rule_base, 'what_therapy',
                  therapy_consult_aritm10, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm11', This_rule_base, 'what_therapy',
                  therapy_consult_aritm11, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm12', This_rule_base, 'what_therapy',
                  therapy_consult_aritm12, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm13', This_rule_base, 'what_therapy',
                  therapy_consult_aritm13, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm14', This_rule_base, 'what_therapy',
                  therapy_consult_aritm14, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm15', This_rule_base, 'what_therapy',
                  therapy_consult_aritm15, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm16', This_rule_base, 'what_therapy',
                  therapy_consult_aritm16, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm17', This_rule_base, 'what_therapy',
                  therapy_consult_aritm17, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm18', This_rule_base, 'what_therapy',
                  therapy_consult_aritm18, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm19', This_rule_base, 'what_therapy',
                  therapy_consult_aritm19, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm20', This_rule_base, 'what_therapy',
                  therapy_consult_aritm20, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm21', This_rule_base, 'what_therapy',
                  therapy_consult_aritm21, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm22', This_rule_base, 'what_therapy',
                  therapy_consult_aritm22, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm23', This_rule_base, 'what_therapy',
                  therapy_consult_aritm23, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm24', This_rule_base, 'what_therapy',
                  therapy_consult_aritm24, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm25', This_rule_base, 'what_therapy',
                  therapy_consult_aritm25, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm26', This_rule_base, 'what_therapy',
                  therapy_consult_aritm26, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm27', This_rule_base, 'what_therapy',
                  therapy_consult_aritm27, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm28', This_rule_base, 'what_therapy',
                  therapy_consult_aritm28, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm29', This_rule_base, 'what_therapy',
                  therapy_consult_aritm29, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm30', This_rule_base, 'what_therapy',
                  therapy_consult_aritm30, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm31', This_rule_base, 'what_therapy',
                  therapy_consult_aritm31, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm32', This_rule_base, 'what_therapy',
                  therapy_consult_aritm32, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm33', This_rule_base, 'what_therapy',
                  therapy_consult_aritm33, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm34', This_rule_base, 'what_therapy',
                  therapy_consult_aritm34, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm35', This_rule_base, 'what_therapy',
                  therapy_consult_aritm35, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm36', This_rule_base, 'what_therapy',
                  therapy_consult_aritm36, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm37', This_rule_base, 'what_therapy',
                  therapy_consult_aritm37, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm38', This_rule_base, 'what_therapy',
                  therapy_consult_aritm38, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm39', This_rule_base, 'what_therapy',
                  therapy_consult_aritm39, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm40', This_rule_base, 'what_therapy',
                  therapy_consult_aritm40, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm41', This_rule_base, 'what_therapy',
                  therapy_consult_aritm41, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm42', This_rule_base, 'what_therapy',
                  therapy_consult_aritm42, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm43', This_rule_base, 'what_therapy',
                  therapy_consult_aritm43, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm44', This_rule_base, 'what_therapy',
                  therapy_consult_aritm44, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm45', This_rule_base, 'what_therapy',
                  therapy_consult_aritm45, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm46', This_rule_base, 'what_therapy',
                  therapy_consult_aritm46, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm47', This_rule_base, 'what_therapy',
                  therapy_consult_aritm47, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm48', This_rule_base, 'what_therapy',
                  therapy_consult_aritm48, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm49', This_rule_base, 'what_therapy',
                  therapy_consult_aritm49, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm50', This_rule_base, 'what_therapy',
                  therapy_consult_aritm50, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm51', This_rule_base, 'what_therapy',
                  therapy_consult_aritm51, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm52', This_rule_base, 'what_therapy',
                  therapy_consult_aritm52, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm53', This_rule_base, 'what_therapy',
                  therapy_consult_aritm53, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm54', This_rule_base, 'what_therapy',
                  therapy_consult_aritm54, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm55', This_rule_base, 'what_therapy',
                  therapy_consult_aritm55, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm56', This_rule_base, 'what_therapy',
                  therapy_consult_aritm56, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm57', This_rule_base, 'what_therapy',
                  therapy_consult_aritm57, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm58', This_rule_base, 'what_therapy',
                  therapy_consult_aritm58, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm59', This_rule_base, 'what_therapy',
                  therapy_consult_aritm59, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm60', This_rule_base, 'what_therapy',
                  therapy_consult_aritm60, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm61', This_rule_base, 'what_therapy',
                  therapy_consult_aritm61, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm62', This_rule_base, 'what_therapy',
                  therapy_consult_aritm62, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm63', This_rule_base, 'what_therapy',
                  therapy_consult_aritm63, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm64', This_rule_base, 'what_therapy',
                  therapy_consult_aritm64, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm65', This_rule_base, 'what_therapy',
                  therapy_consult_aritm65, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm66', This_rule_base, 'what_therapy',
                  therapy_consult_aritm66, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())
  
  bc_rule.bc_rule('therapy_consult_aritm67', This_rule_base, 'what_therapy',
                  therapy_consult_aritm67, None,
                  (pattern.pattern_literal("Необходима консультация аритмолога и решение вопроса о постановке ЭКС"),),
                  (),
                  ())


Krb_filename = '..\\ca_rules_questions.krb'
Krb_lineno_map = (
    ((14, 18), (3, 3)),
    ((21, 26), (6, 6)),
    ((27, 32), (7, 7)),
    ((33, 38), (8, 8)),
    ((56, 60), (10, 10)),
    ((62, 67), (12, 12)),
    ((68, 73), (13, 13)),
    ((74, 79), (14, 14)),
    ((92, 96), (16, 16)),
    ((98, 103), (18, 18)),
    ((104, 104), (19, 19)),
    ((117, 121), (21, 21)),
    ((123, 128), (23, 23)),
    ((129, 129), (24, 24)),
    ((142, 146), (26, 26)),
    ((148, 153), (28, 28)),
    ((154, 154), (29, 29)),
    ((167, 171), (31, 31)),
    ((173, 178), (33, 33)),
    ((179, 179), (34, 34)),
    ((192, 196), (36, 36)),
    ((198, 203), (38, 38)),
    ((204, 204), (39, 39)),
    ((217, 221), (41, 41)),
    ((223, 228), (43, 43)),
    ((229, 229), (44, 44)),
    ((242, 246), (46, 46)),
    ((248, 253), (48, 48)),
    ((254, 254), (49, 49)),
    ((267, 271), (51, 51)),
    ((273, 278), (53, 53)),
    ((279, 279), (54, 54)),
    ((292, 296), (56, 56)),
    ((298, 303), (58, 58)),
    ((304, 309), (59, 59)),
    ((310, 315), (60, 60)),
    ((328, 332), (62, 62)),
    ((334, 339), (64, 64)),
    ((340, 345), (65, 65)),
    ((346, 351), (66, 66)),
    ((352, 357), (67, 67)),
    ((370, 374), (69, 69)),
    ((376, 381), (71, 71)),
    ((382, 387), (72, 72)),
    ((388, 393), (73, 73)),
    ((394, 399), (74, 74)),
    ((412, 416), (76, 76)),
    ((418, 423), (78, 78)),
    ((424, 429), (79, 79)),
    ((430, 435), (80, 80)),
    ((448, 452), (82, 82)),
    ((454, 459), (84, 84)),
    ((460, 465), (85, 85)),
    ((478, 482), (87, 87)),
    ((484, 489), (89, 89)),
    ((490, 495), (90, 90)),
    ((508, 512), (92, 92)),
    ((514, 519), (94, 94)),
    ((520, 525), (95, 95)),
    ((538, 542), (97, 97)),
    ((544, 549), (99, 99)),
    ((550, 555), (100, 100)),
    ((568, 572), (102, 102)),
    ((574, 579), (104, 104)),
    ((580, 585), (105, 105)),
    ((586, 591), (106, 106)),
    ((592, 597), (107, 107)),
    ((610, 614), (109, 109)),
    ((616, 621), (111, 111)),
    ((622, 627), (112, 112)),
    ((628, 633), (113, 113)),
    ((634, 639), (114, 114)),
    ((652, 656), (116, 116)),
    ((658, 663), (118, 118)),
    ((664, 669), (119, 119)),
    ((670, 675), (120, 120)),
    ((676, 681), (121, 121)),
    ((694, 698), (123, 123)),
    ((700, 705), (125, 125)),
    ((706, 711), (126, 126)),
    ((712, 717), (127, 127)),
    ((718, 723), (128, 128)),
    ((724, 729), (129, 129)),
    ((742, 746), (131, 131)),
    ((748, 753), (133, 133)),
    ((754, 759), (134, 134)),
    ((760, 765), (135, 135)),
    ((766, 771), (136, 136)),
    ((772, 777), (137, 137)),
    ((790, 794), (139, 139)),
    ((796, 801), (141, 141)),
    ((802, 807), (142, 142)),
    ((808, 813), (143, 143)),
    ((814, 819), (144, 144)),
    ((820, 825), (145, 145)),
    ((838, 842), (147, 147)),
    ((844, 849), (149, 149)),
    ((850, 855), (150, 150)),
    ((856, 861), (151, 151)),
    ((862, 867), (152, 152)),
    ((880, 884), (154, 154)),
    ((886, 891), (156, 156)),
    ((892, 897), (157, 157)),
    ((898, 903), (158, 158)),
    ((904, 909), (159, 159)),
    ((922, 926), (161, 161)),
    ((928, 933), (163, 163)),
    ((934, 939), (164, 164)),
    ((940, 945), (165, 165)),
    ((946, 951), (166, 166)),
    ((964, 968), (168, 168)),
    ((970, 975), (170, 170)),
    ((976, 981), (171, 171)),
    ((982, 987), (172, 172)),
    ((988, 993), (173, 173)),
    ((994, 999), (174, 174)),
    ((1012, 1016), (176, 176)),
    ((1018, 1023), (178, 178)),
    ((1024, 1029), (179, 179)),
    ((1030, 1035), (180, 180)),
    ((1036, 1041), (181, 181)),
    ((1042, 1047), (182, 182)),
    ((1060, 1064), (184, 184)),
    ((1066, 1071), (186, 186)),
    ((1072, 1077), (187, 187)),
    ((1078, 1083), (188, 188)),
    ((1084, 1089), (189, 189)),
    ((1090, 1095), (190, 190)),
    ((1108, 1112), (192, 192)),
    ((1114, 1119), (194, 194)),
    ((1120, 1125), (195, 195)),
    ((1126, 1131), (196, 196)),
    ((1132, 1137), (197, 197)),
    ((1138, 1143), (198, 198)),
    ((1156, 1160), (200, 200)),
    ((1162, 1167), (202, 202)),
    ((1168, 1173), (203, 203)),
    ((1174, 1179), (204, 204)),
    ((1180, 1185), (205, 205)),
    ((1186, 1191), (206, 206)),
    ((1204, 1208), (208, 208)),
    ((1210, 1215), (210, 210)),
    ((1216, 1221), (211, 211)),
    ((1222, 1227), (212, 212)),
    ((1228, 1233), (213, 213)),
    ((1234, 1239), (214, 214)),
    ((1252, 1256), (216, 216)),
    ((1258, 1263), (218, 218)),
    ((1264, 1269), (219, 219)),
    ((1270, 1275), (220, 220)),
    ((1276, 1281), (221, 221)),
    ((1282, 1287), (222, 222)),
    ((1300, 1304), (224, 224)),
    ((1306, 1311), (226, 226)),
    ((1312, 1317), (227, 227)),
    ((1318, 1323), (228, 228)),
    ((1324, 1329), (229, 229)),
    ((1330, 1335), (230, 230)),
    ((1348, 1352), (232, 232)),
    ((1354, 1359), (234, 234)),
    ((1360, 1365), (235, 235)),
    ((1366, 1371), (236, 236)),
    ((1372, 1377), (237, 237)),
    ((1378, 1383), (238, 238)),
    ((1396, 1400), (240, 240)),
    ((1402, 1407), (242, 242)),
    ((1408, 1413), (243, 243)),
    ((1414, 1419), (244, 244)),
    ((1432, 1436), (246, 246)),
    ((1438, 1443), (248, 248)),
    ((1444, 1449), (249, 249)),
    ((1462, 1466), (251, 251)),
    ((1468, 1473), (253, 253)),
    ((1474, 1479), (254, 254)),
    ((1492, 1496), (256, 256)),
    ((1498, 1503), (258, 258)),
    ((1505, 1510), (260, 260)),
    ((1511, 1516), (261, 261)),
    ((1517, 1522), (262, 262)),
    ((1523, 1528), (263, 263)),
    ((1547, 1551), (265, 265)),
    ((1553, 1558), (267, 267)),
    ((1560, 1565), (269, 269)),
    ((1566, 1571), (270, 270)),
    ((1572, 1577), (271, 271)),
    ((1578, 1583), (272, 272)),
    ((1602, 1606), (274, 274)),
    ((1608, 1613), (276, 276)),
    ((1615, 1620), (278, 278)),
    ((1621, 1626), (279, 279)),
    ((1627, 1632), (280, 280)),
    ((1633, 1638), (281, 281)),
    ((1657, 1661), (283, 283)),
    ((1663, 1668), (285, 285)),
    ((1669, 1674), (286, 286)),
    ((1675, 1680), (287, 287)),
    ((1681, 1686), (288, 288)),
    ((1687, 1692), (289, 289)),
    ((1705, 1709), (291, 291)),
    ((1711, 1716), (293, 293)),
    ((1717, 1722), (294, 294)),
    ((1723, 1728), (295, 295)),
    ((1729, 1734), (296, 296)),
    ((1735, 1740), (297, 297)),
    ((1753, 1757), (299, 299)),
    ((1759, 1764), (301, 301)),
    ((1765, 1770), (302, 302)),
    ((1771, 1776), (303, 303)),
    ((1777, 1782), (304, 304)),
    ((1783, 1788), (305, 305)),
    ((1801, 1805), (307, 307)),
    ((1807, 1812), (309, 309)),
    ((1813, 1813), (310, 310)),
    ((1826, 1830), (312, 312)),
    ((1832, 1837), (314, 314)),
    ((1838, 1838), (315, 315)),
    ((1851, 1855), (317, 317)),
    ((1857, 1862), (319, 319)),
    ((1863, 1863), (320, 320)),
    ((1876, 1880), (322, 322)),
    ((1882, 1887), (324, 324)),
    ((1888, 1893), (325, 325)),
    ((1894, 1899), (326, 326)),
    ((1900, 1905), (327, 327)),
    ((1918, 1922), (329, 329)),
    ((1924, 1929), (331, 331)),
    ((1930, 1935), (332, 332)),
    ((1936, 1941), (333, 333)),
    ((1942, 1947), (334, 334)),
    ((1948, 1953), (335, 335)),
    ((1966, 1970), (337, 337)),
    ((1972, 1977), (339, 339)),
    ((1978, 1983), (340, 340)),
    ((1984, 1989), (341, 341)),
    ((1990, 1995), (342, 342)),
    ((2008, 2012), (344, 344)),
    ((2014, 2019), (346, 346)),
    ((2020, 2025), (347, 347)),
    ((2026, 2031), (348, 348)),
    ((2032, 2037), (349, 349)),
    ((2038, 2043), (350, 350)),
    ((2056, 2060), (352, 352)),
    ((2062, 2067), (354, 354)),
    ((2068, 2073), (355, 355)),
    ((2074, 2079), (356, 356)),
    ((2080, 2085), (357, 357)),
    ((2098, 2102), (359, 359)),
    ((2104, 2109), (361, 361)),
    ((2110, 2115), (362, 362)),
    ((2116, 2121), (363, 363)),
    ((2122, 2127), (364, 364)),
    ((2128, 2133), (365, 365)),
    ((2146, 2150), (367, 367)),
    ((2152, 2157), (369, 369)),
    ((2158, 2163), (370, 370)),
    ((2164, 2169), (371, 371)),
    ((2170, 2175), (372, 372)),
    ((2188, 2192), (374, 374)),
    ((2194, 2199), (376, 376)),
    ((2200, 2205), (377, 377)),
    ((2206, 2211), (378, 378)),
    ((2212, 2217), (379, 379)),
    ((2230, 2234), (381, 381)),
    ((2236, 2241), (383, 383)),
    ((2242, 2247), (384, 384)),
    ((2248, 2253), (385, 385)),
    ((2254, 2259), (386, 386)),
    ((2272, 2276), (388, 388)),
    ((2278, 2283), (390, 390)),
    ((2284, 2289), (391, 391)),
    ((2290, 2295), (392, 392)),
    ((2296, 2301), (393, 393)),
    ((2314, 2318), (395, 395)),
    ((2320, 2325), (397, 397)),
    ((2326, 2331), (398, 398)),
    ((2332, 2337), (399, 399)),
    ((2338, 2343), (400, 400)),
    ((2356, 2360), (402, 402)),
    ((2362, 2367), (404, 404)),
    ((2368, 2373), (405, 405)),
    ((2374, 2379), (406, 406)),
    ((2380, 2385), (407, 407)),
    ((2398, 2402), (409, 409)),
    ((2404, 2409), (411, 411)),
    ((2410, 2415), (412, 412)),
    ((2416, 2421), (413, 413)),
    ((2422, 2427), (414, 414)),
    ((2440, 2444), (416, 416)),
    ((2446, 2451), (418, 418)),
    ((2452, 2457), (419, 419)),
    ((2458, 2463), (420, 420)),
    ((2464, 2469), (421, 421)),
    ((2482, 2486), (423, 423)),
    ((2488, 2493), (425, 425)),
    ((2494, 2499), (426, 426)),
    ((2500, 2505), (427, 427)),
    ((2506, 2511), (428, 428)),
    ((2524, 2528), (430, 430)),
    ((2530, 2535), (432, 432)),
    ((2536, 2541), (433, 433)),
    ((2542, 2547), (434, 434)),
    ((2560, 2564), (436, 436)),
    ((2566, 2571), (438, 438)),
    ((2572, 2577), (439, 439)),
    ((2578, 2583), (440, 440)),
    ((2596, 2600), (442, 442)),
    ((2602, 2607), (444, 444)),
    ((2608, 2613), (445, 445)),
    ((2614, 2619), (446, 446)),
    ((2632, 2636), (448, 448)),
    ((2638, 2643), (450, 450)),
    ((2644, 2649), (451, 451)),
    ((2650, 2655), (452, 452)),
    ((2668, 2672), (454, 454)),
    ((2674, 2679), (456, 456)),
    ((2680, 2685), (457, 457)),
    ((2686, 2691), (458, 458)),
    ((2704, 2708), (460, 460)),
    ((2710, 2715), (462, 462)),
    ((2716, 2721), (463, 463)),
    ((2722, 2727), (464, 464)),
    ((2740, 2744), (466, 466)),
    ((2746, 2751), (468, 468)),
    ((2752, 2757), (469, 469)),
    ((2758, 2763), (470, 470)),
    ((2776, 2780), (472, 472)),
    ((2782, 2787), (474, 474)),
    ((2788, 2793), (475, 475)),
    ((2794, 2799), (476, 476)),
    ((2812, 2816), (478, 478)),
    ((2818, 2823), (480, 480)),
    ((2824, 2829), (481, 481)),
    ((2830, 2835), (482, 482)),
    ((2848, 2852), (484, 484)),
    ((2854, 2859), (486, 486)),
    ((2860, 2865), (487, 487)),
    ((2866, 2871), (488, 488)),
    ((2884, 2888), (490, 490)),
    ((2890, 2895), (492, 492)),
    ((2896, 2901), (493, 493)),
    ((2902, 2907), (494, 494)),
    ((2920, 2924), (496, 496)),
    ((2926, 2931), (498, 498)),
    ((2932, 2937), (499, 499)),
    ((2938, 2943), (500, 500)),
    ((2956, 2960), (502, 502)),
    ((2962, 2967), (504, 504)),
    ((2968, 2973), (505, 505)),
    ((2974, 2979), (506, 506)),
    ((2992, 2996), (508, 508)),
    ((2998, 3003), (510, 510)),
    ((3004, 3009), (511, 511)),
    ((3010, 3015), (512, 512)),
    ((3028, 3032), (514, 514)),
    ((3034, 3039), (516, 516)),
    ((3040, 3045), (517, 517)),
    ((3046, 3051), (518, 518)),
    ((3064, 3068), (520, 520)),
    ((3070, 3075), (522, 522)),
    ((3076, 3081), (523, 523)),
    ((3082, 3087), (524, 524)),
    ((3088, 3093), (525, 525)),
    ((3094, 3099), (526, 526)),
    ((3112, 3116), (528, 528)),
    ((3118, 3123), (530, 530)),
    ((3124, 3129), (531, 531)),
    ((3130, 3135), (532, 532)),
    ((3136, 3141), (533, 533)),
    ((3142, 3147), (534, 534)),
    ((3160, 3164), (536, 536)),
    ((3166, 3171), (538, 538)),
    ((3172, 3177), (539, 539)),
    ((3178, 3183), (540, 540)),
    ((3184, 3189), (541, 541)),
    ((3190, 3195), (542, 542)),
    ((3208, 3212), (544, 544)),
    ((3214, 3219), (546, 546)),
    ((3220, 3225), (547, 547)),
    ((3238, 3242), (549, 549)),
    ((3244, 3249), (551, 551)),
    ((3250, 3255), (552, 552)),
    ((3268, 3272), (554, 554)),
    ((3274, 3279), (556, 556)),
    ((3280, 3285), (557, 557)),
    ((3298, 3302), (559, 559)),
    ((3304, 3309), (561, 561)),
    ((3310, 3315), (562, 562)),
    ((3328, 3332), (564, 564)),
    ((3334, 3339), (566, 566)),
    ((3340, 3345), (567, 567)),
    ((3358, 3362), (569, 569)),
    ((3364, 3369), (571, 571)),
    ((3370, 3375), (572, 572)),
    ((3388, 3392), (574, 574)),
    ((3394, 3399), (576, 576)),
    ((3400, 3405), (577, 577)),
    ((3418, 3422), (579, 579)),
    ((3424, 3429), (581, 581)),
    ((3430, 3435), (582, 582)),
    ((3448, 3452), (584, 584)),
    ((3454, 3459), (586, 586)),
    ((3460, 3465), (587, 587)),
    ((3478, 3482), (589, 589)),
    ((3484, 3489), (591, 591)),
    ((3490, 3495), (592, 592)),
    ((3508, 3512), (594, 594)),
    ((3514, 3519), (596, 596)),
    ((3520, 3525), (597, 597)),
    ((3538, 3542), (599, 599)),
    ((3544, 3549), (601, 601)),
    ((3550, 3555), (602, 602)),
    ((3568, 3572), (604, 604)),
    ((3574, 3579), (606, 606)),
    ((3580, 3585), (607, 607)),
    ((3598, 3602), (609, 609)),
    ((3604, 3609), (611, 611)),
    ((3610, 3615), (612, 612)),
    ((3628, 3632), (614, 614)),
    ((3634, 3639), (616, 616)),
    ((3640, 3645), (617, 617)),
    ((3658, 3662), (619, 619)),
    ((3664, 3669), (621, 621)),
    ((3670, 3675), (622, 622)),
    ((3676, 3681), (623, 623)),
    ((3694, 3698), (625, 625)),
    ((3700, 3705), (627, 627)),
    ((3706, 3711), (628, 628)),
    ((3712, 3717), (629, 629)),
    ((3730, 3734), (631, 631)),
    ((3736, 3741), (633, 633)),
    ((3742, 3747), (634, 634)),
    ((3748, 3753), (635, 635)),
    ((3766, 3770), (637, 637)),
    ((3772, 3777), (639, 639)),
    ((3778, 3783), (640, 640)),
    ((3784, 3789), (641, 641)),
    ((3802, 3806), (643, 643)),
    ((3808, 3813), (645, 645)),
    ((3814, 3819), (646, 646)),
    ((3820, 3825), (647, 647)),
    ((3838, 3842), (649, 649)),
    ((3844, 3849), (651, 651)),
    ((3850, 3855), (652, 652)),
    ((3856, 3861), (653, 653)),
    ((3874, 3878), (655, 655)),
    ((3880, 3885), (657, 657)),
    ((3886, 3891), (658, 658)),
    ((3892, 3897), (659, 659)),
    ((3910, 3914), (661, 661)),
    ((3916, 3921), (663, 663)),
    ((3922, 3927), (664, 664)),
    ((3928, 3933), (665, 665)),
    ((3946, 3950), (667, 667)),
    ((3952, 3957), (669, 669)),
    ((3958, 3963), (670, 670)),
    ((3964, 3969), (671, 671)),
    ((3982, 3986), (673, 673)),
    ((3988, 3993), (675, 675)),
    ((3994, 3999), (676, 676)),
    ((4000, 4005), (677, 677)),
    ((4018, 4022), (679, 679)),
    ((4024, 4029), (681, 681)),
    ((4030, 4035), (682, 682)),
    ((4036, 4041), (683, 683)),
    ((4054, 4058), (685, 685)),
    ((4060, 4065), (687, 687)),
    ((4066, 4071), (688, 688)),
    ((4072, 4077), (689, 689)),
    ((4090, 4094), (691, 691)),
    ((4096, 4101), (693, 693)),
    ((4102, 4107), (694, 694)),
    ((4108, 4113), (695, 695)),
    ((4126, 4130), (697, 697)),
    ((4132, 4137), (699, 699)),
    ((4138, 4143), (700, 700)),
    ((4144, 4149), (701, 701)),
    ((4162, 4166), (703, 703)),
    ((4168, 4173), (705, 705)),
    ((4174, 4179), (706, 706)),
    ((4180, 4185), (707, 707)),
    ((4198, 4202), (709, 709)),
    ((4205, 4210), (712, 712)),
    ((4211, 4216), (713, 713)),
    ((4217, 4222), (714, 714)),
    ((4240, 4244), (716, 716)),
    ((4246, 4251), (718, 718)),
    ((4252, 4257), (719, 719)),
    ((4270, 4274), (721, 721)),
    ((4276, 4281), (723, 723)),
    ((4282, 4287), (724, 724)),
    ((4300, 4304), (726, 726)),
    ((4306, 4311), (728, 728)),
    ((4312, 4317), (729, 729)),
    ((4330, 4334), (731, 731)),
    ((4336, 4341), (733, 733)),
    ((4342, 4347), (734, 734)),
    ((4360, 4364), (736, 736)),
    ((4366, 4371), (738, 738)),
    ((4372, 4377), (739, 739)),
    ((4390, 4394), (741, 741)),
    ((4396, 4401), (743, 743)),
    ((4402, 4407), (744, 744)),
    ((4420, 4424), (746, 746)),
    ((4426, 4431), (748, 748)),
    ((4432, 4437), (749, 749)),
    ((4450, 4454), (751, 751)),
    ((4456, 4461), (753, 753)),
    ((4462, 4467), (754, 754)),
    ((4480, 4484), (756, 756)),
    ((4486, 4491), (758, 758)),
    ((4492, 4497), (759, 759)),
    ((4510, 4514), (761, 761)),
    ((4516, 4521), (763, 763)),
    ((4522, 4527), (764, 764)),
    ((4540, 4544), (766, 766)),
    ((4546, 4551), (768, 768)),
    ((4552, 4557), (769, 769)),
    ((4570, 4574), (771, 771)),
    ((4576, 4581), (773, 773)),
    ((4582, 4587), (774, 774)),
    ((4600, 4604), (776, 776)),
    ((4606, 4611), (778, 778)),
    ((4612, 4617), (779, 779)),
    ((4630, 4634), (781, 781)),
    ((4636, 4641), (783, 783)),
    ((4642, 4647), (784, 784)),
    ((4660, 4664), (786, 786)),
    ((4666, 4671), (788, 788)),
    ((4672, 4677), (789, 789)),
    ((4690, 4694), (791, 791)),
    ((4696, 4701), (793, 793)),
    ((4702, 4707), (794, 794)),
    ((4720, 4724), (796, 796)),
    ((4726, 4731), (798, 798)),
    ((4732, 4737), (799, 799)),
    ((4750, 4754), (801, 801)),
    ((4756, 4761), (803, 803)),
    ((4762, 4767), (804, 804)),
    ((4780, 4784), (806, 806)),
    ((4786, 4791), (808, 808)),
    ((4792, 4797), (809, 809)),
    ((4810, 4814), (811, 811)),
    ((4816, 4821), (813, 813)),
    ((4822, 4827), (814, 814)),
    ((4840, 4844), (816, 816)),
    ((4846, 4851), (818, 818)),
    ((4852, 4857), (819, 819)),
    ((4870, 4874), (821, 821)),
    ((4876, 4881), (823, 823)),
    ((4882, 4887), (824, 824)),
    ((4900, 4904), (826, 826)),
    ((4906, 4911), (828, 828)),
    ((4912, 4917), (829, 829)),
    ((4930, 4934), (831, 831)),
    ((4936, 4941), (833, 833)),
    ((4942, 4947), (834, 834)),
    ((4960, 4964), (836, 836)),
    ((4966, 4971), (838, 838)),
    ((4972, 4977), (839, 839)),
    ((4990, 4994), (841, 841)),
    ((4996, 5001), (843, 843)),
    ((5002, 5007), (844, 844)),
    ((5020, 5024), (846, 846)),
    ((5026, 5031), (848, 848)),
    ((5032, 5037), (849, 849)),
    ((5050, 5054), (851, 851)),
    ((5056, 5061), (853, 853)),
    ((5062, 5067), (854, 854)),
    ((5080, 5084), (856, 856)),
    ((5086, 5091), (858, 858)),
    ((5092, 5097), (859, 859)),
    ((5110, 5114), (861, 861)),
    ((5116, 5121), (863, 863)),
    ((5122, 5127), (864, 864)),
    ((5140, 5144), (866, 866)),
    ((5146, 5151), (868, 868)),
    ((5152, 5157), (869, 869)),
    ((5170, 5174), (871, 871)),
    ((5176, 5181), (873, 873)),
    ((5182, 5187), (874, 874)),
    ((5200, 5204), (876, 876)),
    ((5206, 5211), (878, 878)),
    ((5212, 5217), (879, 879)),
    ((5230, 5234), (881, 881)),
    ((5236, 5241), (883, 883)),
    ((5242, 5247), (884, 884)),
    ((5248, 5253), (885, 885)),
    ((5266, 5270), (887, 887)),
    ((5272, 5277), (889, 889)),
    ((5278, 5283), (890, 890)),
    ((5284, 5289), (891, 891)),
    ((5290, 5290), (892, 892)),
    ((5303, 5307), (894, 894)),
    ((5309, 5314), (896, 896)),
    ((5315, 5320), (897, 897)),
    ((5333, 5337), (899, 899)),
    ((5339, 5344), (901, 901)),
    ((5345, 5350), (902, 902)),
    ((5351, 5356), (903, 903)),
    ((5357, 5357), (904, 904)),
    ((5370, 5374), (906, 906)),
    ((5376, 5381), (908, 908)),
    ((5382, 5387), (909, 909)),
    ((5400, 5404), (911, 911)),
    ((5406, 5411), (913, 913)),
    ((5412, 5417), (914, 914)),
    ((5430, 5434), (916, 916)),
    ((5436, 5441), (918, 918)),
    ((5442, 5447), (919, 919)),
    ((5460, 5464), (921, 921)),
    ((5466, 5471), (923, 923)),
    ((5472, 5477), (924, 924)),
    ((5490, 5494), (926, 926)),
    ((5496, 5501), (928, 928)),
    ((5502, 5507), (929, 929)),
    ((5520, 5524), (931, 931)),
    ((5526, 5531), (933, 933)),
    ((5532, 5537), (934, 934)),
    ((5550, 5554), (936, 936)),
    ((5556, 5561), (938, 938)),
    ((5562, 5567), (939, 939)),
    ((5580, 5584), (941, 941)),
    ((5586, 5591), (943, 943)),
    ((5592, 5597), (944, 944)),
    ((5610, 5614), (946, 946)),
    ((5616, 5621), (948, 948)),
    ((5622, 5627), (949, 949)),
    ((5640, 5644), (951, 951)),
    ((5646, 5651), (953, 953)),
    ((5652, 5657), (954, 954)),
    ((5670, 5674), (956, 956)),
    ((5676, 5681), (958, 958)),
    ((5682, 5687), (959, 959)),
    ((5700, 5704), (961, 961)),
    ((5706, 5711), (963, 963)),
    ((5712, 5717), (964, 964)),
    ((5730, 5734), (966, 966)),
    ((5736, 5741), (968, 968)),
    ((5742, 5747), (969, 969)),
    ((5760, 5764), (971, 971)),
    ((5766, 5771), (973, 973)),
    ((5772, 5777), (974, 974)),
    ((5790, 5794), (976, 976)),
    ((5796, 5801), (978, 978)),
    ((5802, 5807), (979, 979)),
    ((5820, 5824), (981, 981)),
    ((5826, 5831), (983, 983)),
    ((5832, 5837), (984, 984)),
    ((5850, 5854), (986, 986)),
    ((5856, 5861), (988, 988)),
    ((5862, 5867), (989, 989)),
    ((5880, 5884), (991, 991)),
    ((5886, 5891), (993, 993)),
    ((5892, 5897), (994, 994)),
    ((5910, 5914), (996, 996)),
    ((5916, 5921), (998, 998)),
    ((5922, 5927), (999, 999)),
    ((5940, 5944), (1001, 1001)),
    ((5946, 5951), (1003, 1003)),
    ((5952, 5957), (1004, 1004)),
    ((5970, 5974), (1006, 1006)),
    ((5976, 5981), (1008, 1008)),
    ((5982, 5987), (1009, 1009)),
    ((6000, 6004), (1011, 1011)),
    ((6006, 6011), (1013, 1013)),
    ((6012, 6017), (1014, 1014)),
    ((6030, 6034), (1016, 1016)),
    ((6036, 6041), (1018, 1018)),
    ((6042, 6047), (1019, 1019)),
    ((6060, 6064), (1021, 1021)),
    ((6066, 6071), (1023, 1023)),
    ((6072, 6077), (1024, 1024)),
    ((6090, 6094), (1026, 1026)),
    ((6096, 6101), (1028, 1028)),
    ((6102, 6107), (1029, 1029)),
    ((6120, 6124), (1031, 1031)),
    ((6126, 6131), (1033, 1033)),
    ((6132, 6137), (1034, 1034)),
    ((6150, 6154), (1036, 1036)),
    ((6156, 6161), (1038, 1038)),
    ((6162, 6167), (1039, 1039)),
    ((6180, 6184), (1041, 1041)),
    ((6186, 6191), (1043, 1043)),
    ((6192, 6197), (1044, 1044)),
    ((6210, 6214), (1046, 1046)),
    ((6216, 6221), (1048, 1048)),
    ((6222, 6227), (1049, 1049)),
    ((6240, 6244), (1051, 1051)),
    ((6246, 6251), (1053, 1053)),
    ((6252, 6257), (1054, 1054)),
    ((6270, 6274), (1056, 1056)),
    ((6276, 6281), (1058, 1058)),
    ((6282, 6287), (1059, 1059)),
    ((6300, 6304), (1061, 1061)),
    ((6306, 6311), (1063, 1063)),
    ((6312, 6317), (1064, 1064)),
    ((6330, 6334), (1066, 1066)),
    ((6336, 6341), (1068, 1068)),
    ((6342, 6347), (1069, 1069)),
    ((6360, 6364), (1071, 1071)),
    ((6366, 6371), (1073, 1073)),
    ((6372, 6377), (1074, 1074)),
    ((6390, 6394), (1076, 1076)),
    ((6396, 6401), (1078, 1078)),
    ((6402, 6407), (1079, 1079)),
    ((6420, 6424), (1081, 1081)),
    ((6426, 6431), (1083, 1083)),
    ((6432, 6437), (1084, 1084)),
    ((6450, 6454), (1086, 1086)),
    ((6456, 6461), (1088, 1088)),
    ((6462, 6467), (1089, 1089)),
    ((6480, 6484), (1091, 1091)),
    ((6486, 6491), (1093, 1093)),
    ((6492, 6497), (1094, 1094)),
    ((6510, 6514), (1096, 1096)),
    ((6516, 6521), (1098, 1098)),
    ((6522, 6527), (1099, 1099)),
    ((6540, 6544), (1101, 1101)),
    ((6546, 6551), (1103, 1103)),
    ((6552, 6557), (1104, 1104)),
    ((6570, 6574), (1106, 1106)),
    ((6576, 6581), (1108, 1108)),
    ((6582, 6587), (1109, 1109)),
    ((6600, 6604), (1111, 1111)),
    ((6606, 6611), (1113, 1113)),
    ((6612, 6617), (1114, 1114)),
    ((6630, 6634), (1116, 1116)),
    ((6636, 6641), (1118, 1118)),
    ((6642, 6647), (1119, 1119)),
    ((6660, 6664), (1121, 1121)),
    ((6666, 6671), (1123, 1123)),
    ((6672, 6677), (1124, 1124)),
    ((6690, 6694), (1126, 1126)),
    ((6696, 6701), (1128, 1128)),
    ((6702, 6707), (1129, 1129)),
    ((6720, 6724), (1131, 1131)),
    ((6726, 6731), (1133, 1133)),
    ((6732, 6737), (1134, 1134)),
    ((6750, 6754), (1136, 1136)),
    ((6756, 6761), (1138, 1138)),
    ((6762, 6767), (1139, 1139)),
    ((6780, 6784), (1141, 1141)),
    ((6786, 6791), (1143, 1143)),
    ((6792, 6797), (1144, 1144)),
    ((6810, 6814), (1146, 1146)),
    ((6816, 6821), (1148, 1148)),
    ((6822, 6827), (1149, 1149)),
    ((6840, 6844), (1151, 1151)),
    ((6846, 6851), (1153, 1153)),
    ((6852, 6857), (1154, 1154)),
    ((6870, 6874), (1156, 1156)),
    ((6876, 6881), (1158, 1158)),
    ((6882, 6887), (1159, 1159)),
    ((6900, 6904), (1161, 1161)),
    ((6906, 6911), (1163, 1163)),
    ((6912, 6917), (1164, 1164)),
    ((6930, 6934), (1166, 1166)),
    ((6936, 6941), (1168, 1168)),
    ((6942, 6947), (1169, 1169)),
    ((6960, 6964), (1171, 1171)),
    ((6966, 6971), (1173, 1173)),
    ((6972, 6977), (1174, 1174)),
    ((6990, 6994), (1176, 1176)),
    ((6996, 7001), (1178, 1178)),
    ((7002, 7007), (1179, 1179)),
    ((7020, 7024), (1181, 1181)),
    ((7026, 7031), (1183, 1183)),
    ((7032, 7037), (1184, 1184)),
    ((7050, 7054), (1186, 1186)),
    ((7056, 7061), (1188, 1188)),
    ((7062, 7067), (1189, 1189)),
    ((7080, 7084), (1191, 1191)),
    ((7086, 7091), (1193, 1193)),
    ((7092, 7097), (1194, 1194)),
    ((7110, 7114), (1196, 1196)),
    ((7116, 7121), (1198, 1198)),
    ((7122, 7127), (1199, 1199)),
    ((7140, 7144), (1201, 1201)),
    ((7146, 7151), (1203, 1203)),
    ((7152, 7157), (1204, 1204)),
    ((7170, 7174), (1206, 1206)),
    ((7176, 7181), (1208, 1208)),
    ((7182, 7187), (1209, 1209)),
    ((7200, 7204), (1211, 1211)),
    ((7206, 7211), (1213, 1213)),
    ((7212, 7217), (1214, 1214)),
    ((7230, 7234), (1216, 1216)),
    ((7236, 7241), (1218, 1218)),
    ((7242, 7247), (1219, 1219)),
    ((7260, 7264), (1221, 1221)),
    ((7266, 7271), (1223, 1223)),
    ((7272, 7277), (1224, 1224)),
    ((7290, 7294), (1226, 1226)),
    ((7296, 7301), (1228, 1228)),
    ((7302, 7307), (1229, 1229)),
    ((7320, 7324), (1231, 1231)),
    ((7326, 7331), (1233, 1233)),
    ((7332, 7337), (1234, 1234)),
    ((7350, 7354), (1236, 1236)),
    ((7356, 7361), (1238, 1238)),
    ((7362, 7367), (1239, 1239)),
    ((7380, 7384), (1241, 1241)),
    ((7386, 7391), (1243, 1243)),
    ((7392, 7397), (1244, 1244)),
    ((7410, 7414), (1246, 1246)),
    ((7416, 7421), (1248, 1248)),
    ((7422, 7427), (1249, 1249)),
    ((7440, 7444), (1251, 1251)),
    ((7446, 7451), (1253, 1253)),
    ((7452, 7457), (1254, 1254)),
    ((7470, 7474), (1256, 1256)),
    ((7476, 7481), (1258, 1258)),
    ((7482, 7487), (1259, 1259)),
    ((7500, 7504), (1261, 1261)),
    ((7506, 7511), (1263, 1263)),
    ((7512, 7517), (1264, 1264)),
    ((7518, 7523), (1265, 1265)),
    ((7536, 7540), (1267, 1267)),
    ((7542, 7547), (1269, 1269)),
    ((7548, 7553), (1270, 1270)),
    ((7566, 7570), (1272, 1272)),
    ((7572, 7577), (1274, 1274)),
    ((7578, 7583), (1275, 1275)),
    ((7596, 7600), (1277, 1277)),
    ((7602, 7607), (1279, 1279)),
    ((7608, 7613), (1280, 1280)),
    ((7626, 7630), (1282, 1282)),
    ((7632, 7637), (1284, 1284)),
    ((7638, 7643), (1285, 1285)),
    ((7656, 7660), (1287, 1287)),
    ((7662, 7667), (1289, 1289)),
    ((7668, 7673), (1290, 1290)),
    ((7686, 7690), (1292, 1292)),
    ((7692, 7697), (1294, 1294)),
    ((7698, 7703), (1295, 1295)),
    ((7716, 7720), (1297, 1297)),
    ((7722, 7727), (1299, 1299)),
    ((7728, 7733), (1300, 1300)),
    ((7746, 7750), (1302, 1302)),
    ((7752, 7757), (1304, 1304)),
    ((7758, 7763), (1305, 1305)),
    ((7776, 7780), (1307, 1307)),
    ((7782, 7787), (1309, 1309)),
    ((7788, 7793), (1310, 1310)),
    ((7806, 7810), (1312, 1312)),
    ((7812, 7817), (1314, 1314)),
    ((7818, 7823), (1315, 1315)),
    ((7836, 7840), (1317, 1317)),
    ((7842, 7847), (1319, 1319)),
    ((7848, 7853), (1320, 1320)),
    ((7866, 7870), (1322, 1322)),
    ((7872, 7877), (1324, 1324)),
    ((7878, 7883), (1325, 1325)),
    ((7896, 7900), (1327, 1327)),
    ((7902, 7907), (1329, 1329)),
    ((7908, 7913), (1330, 1330)),
    ((7926, 7930), (1332, 1332)),
    ((7932, 7937), (1334, 1334)),
    ((7938, 7943), (1335, 1335)),
    ((7956, 7960), (1337, 1337)),
    ((7962, 7967), (1339, 1339)),
    ((7968, 7973), (1340, 1340)),
    ((7986, 7990), (1342, 1342)),
    ((7992, 7997), (1344, 1344)),
    ((7998, 8003), (1345, 1345)),
    ((8016, 8020), (1347, 1347)),
    ((8022, 8027), (1349, 1349)),
    ((8028, 8033), (1350, 1350)),
    ((8046, 8050), (1352, 1352)),
    ((8052, 8057), (1354, 1354)),
    ((8058, 8063), (1355, 1355)),
    ((8076, 8080), (1357, 1357)),
    ((8082, 8087), (1359, 1359)),
    ((8088, 8093), (1360, 1360)),
    ((8106, 8110), (1362, 1362)),
    ((8112, 8117), (1364, 1364)),
    ((8118, 8123), (1365, 1365)),
    ((8136, 8140), (1367, 1367)),
    ((8142, 8147), (1369, 1369)),
    ((8148, 8153), (1370, 1370)),
    ((8166, 8170), (1372, 1372)),
    ((8172, 8177), (1374, 1374)),
    ((8178, 8183), (1375, 1375)),
    ((8196, 8200), (1377, 1377)),
    ((8202, 8207), (1379, 1379)),
    ((8208, 8213), (1380, 1380)),
    ((8226, 8230), (1382, 1382)),
    ((8232, 8237), (1384, 1384)),
    ((8238, 8243), (1385, 1385)),
    ((8256, 8260), (1387, 1387)),
    ((8262, 8267), (1389, 1389)),
    ((8268, 8273), (1390, 1390)),
    ((8286, 8290), (1392, 1392)),
    ((8292, 8297), (1394, 1394)),
    ((8298, 8303), (1395, 1395)),
    ((8316, 8320), (1397, 1397)),
    ((8322, 8327), (1399, 1399)),
    ((8328, 8333), (1400, 1400)),
    ((8346, 8350), (1402, 1402)),
    ((8352, 8357), (1404, 1404)),
    ((8358, 8363), (1405, 1405)),
    ((8376, 8380), (1407, 1407)),
    ((8382, 8387), (1409, 1409)),
    ((8388, 8393), (1410, 1410)),
    ((8406, 8410), (1412, 1412)),
    ((8412, 8417), (1414, 1414)),
    ((8418, 8423), (1415, 1415)),
    ((8436, 8440), (1417, 1417)),
    ((8442, 8447), (1419, 1419)),
    ((8448, 8453), (1420, 1420)),
    ((8466, 8470), (1422, 1422)),
    ((8472, 8477), (1424, 1424)),
    ((8478, 8483), (1425, 1425)),
    ((8496, 8500), (1427, 1427)),
    ((8502, 8507), (1429, 1429)),
    ((8508, 8513), (1430, 1430)),
    ((8526, 8530), (1432, 1432)),
    ((8532, 8537), (1434, 1434)),
    ((8538, 8543), (1435, 1435)),
    ((8556, 8560), (1437, 1437)),
    ((8562, 8567), (1439, 1439)),
    ((8568, 8573), (1440, 1440)),
    ((8586, 8590), (1442, 1442)),
    ((8592, 8597), (1444, 1444)),
    ((8598, 8603), (1445, 1445)),
    ((8616, 8620), (1447, 1447)),
    ((8622, 8627), (1449, 1449)),
    ((8628, 8633), (1450, 1450)),
    ((8646, 8650), (1452, 1452)),
    ((8652, 8657), (1454, 1454)),
    ((8658, 8663), (1455, 1455)),
    ((8676, 8680), (1457, 1457)),
    ((8682, 8687), (1459, 1459)),
    ((8688, 8693), (1460, 1460)),
    ((8706, 8710), (1462, 1462)),
    ((8712, 8717), (1464, 1464)),
    ((8718, 8723), (1465, 1465)),
    ((8736, 8740), (1467, 1467)),
    ((8742, 8747), (1469, 1469)),
    ((8748, 8753), (1470, 1470)),
    ((8766, 8770), (1472, 1472)),
    ((8772, 8777), (1474, 1474)),
    ((8778, 8783), (1475, 1475)),
    ((8796, 8800), (1477, 1477)),
    ((8802, 8807), (1479, 1479)),
    ((8808, 8813), (1480, 1480)),
    ((8826, 8830), (1482, 1482)),
    ((8832, 8837), (1484, 1484)),
    ((8838, 8843), (1485, 1485)),
    ((8856, 8860), (1487, 1487)),
    ((8862, 8867), (1489, 1489)),
    ((8868, 8873), (1490, 1490)),
    ((8886, 8890), (1492, 1492)),
    ((8892, 8897), (1494, 1494)),
    ((8898, 8903), (1495, 1495)),
    ((8916, 8920), (1497, 1497)),
    ((8922, 8927), (1499, 1499)),
    ((8928, 8933), (1500, 1500)),
    ((8946, 8950), (1502, 1502)),
    ((8952, 8957), (1504, 1504)),
    ((8958, 8963), (1505, 1505)),
    ((8976, 8980), (1507, 1507)),
    ((8982, 8987), (1509, 1509)),
    ((8988, 8993), (1510, 1510)),
    ((9006, 9010), (1512, 1512)),
    ((9012, 9017), (1514, 1514)),
    ((9018, 9023), (1515, 1515)),
    ((9036, 9040), (1517, 1517)),
    ((9042, 9047), (1519, 1519)),
    ((9048, 9053), (1520, 1520)),
    ((9066, 9070), (1522, 1522)),
    ((9072, 9077), (1524, 1524)),
    ((9078, 9083), (1525, 1525)),
    ((9096, 9100), (1527, 1527)),
    ((9102, 9107), (1529, 1529)),
    ((9108, 9113), (1530, 1530)),
    ((9126, 9130), (1532, 1532)),
    ((9132, 9137), (1534, 1534)),
    ((9138, 9143), (1535, 1535)),
    ((9156, 9160), (1537, 1537)),
    ((9162, 9167), (1539, 1539)),
    ((9168, 9173), (1540, 1540)),
    ((9186, 9190), (1542, 1542)),
    ((9192, 9197), (1544, 1544)),
    ((9198, 9203), (1545, 1545)),
    ((9216, 9220), (1547, 1547)),
    ((9222, 9227), (1549, 1549)),
    ((9228, 9233), (1550, 1550)),
    ((9246, 9250), (1552, 1552)),
    ((9252, 9257), (1554, 1554)),
    ((9258, 9263), (1555, 1555)),
    ((9276, 9280), (1557, 1557)),
    ((9282, 9287), (1559, 1559)),
    ((9288, 9293), (1560, 1560)),
    ((9306, 9310), (1562, 1562)),
    ((9312, 9317), (1564, 1564)),
    ((9318, 9323), (1565, 1565)),
    ((9336, 9340), (1567, 1567)),
    ((9342, 9347), (1569, 1569)),
    ((9348, 9353), (1570, 1570)),
    ((9366, 9370), (1572, 1572)),
    ((9372, 9377), (1574, 1574)),
    ((9378, 9383), (1575, 1575)),
    ((9396, 9400), (1577, 1577)),
    ((9402, 9407), (1579, 1579)),
    ((9408, 9413), (1580, 1580)),
    ((9426, 9430), (1582, 1582)),
    ((9432, 9437), (1584, 1584)),
    ((9438, 9443), (1585, 1585)),
    ((9456, 9460), (1587, 1587)),
    ((9462, 9467), (1589, 1589)),
    ((9468, 9473), (1590, 1590)),
    ((9486, 9490), (1592, 1592)),
    ((9492, 9497), (1594, 1594)),
    ((9498, 9503), (1595, 1595)),
    ((9516, 9520), (1597, 1597)),
    ((9522, 9527), (1599, 1599)),
    ((9528, 9533), (1600, 1600)),
    ((9546, 9550), (1602, 1602)),
    ((9552, 9557), (1604, 1604)),
    ((9558, 9563), (1605, 1605)),
    ((9564, 9569), (1606, 1606)),
    ((9570, 9570), (1607, 1607)),
    ((9583, 9587), (1609, 1609)),
    ((9589, 9594), (1611, 1611)),
    ((9595, 9600), (1612, 1612)),
    ((9601, 9606), (1613, 1613)),
    ((9607, 9607), (1614, 1614)),
    ((9620, 9624), (1616, 1616)),
    ((9626, 9631), (1618, 1618)),
    ((9632, 9637), (1619, 1619)),
    ((9638, 9643), (1620, 1620)),
    ((9644, 9644), (1621, 1621)),
    ((9657, 9661), (1623, 1623)),
    ((9663, 9668), (1625, 1625)),
    ((9669, 9674), (1626, 1626)),
    ((9675, 9680), (1627, 1627)),
    ((9681, 9681), (1628, 1628)),
    ((9694, 9698), (1630, 1630)),
    ((9700, 9705), (1632, 1632)),
    ((9706, 9711), (1633, 1633)),
    ((9712, 9717), (1634, 1634)),
    ((9718, 9718), (1635, 1635)),
    ((9731, 9735), (1637, 1637)),
    ((9737, 9742), (1639, 1639)),
    ((9743, 9748), (1640, 1640)),
    ((9749, 9754), (1641, 1641)),
    ((9755, 9755), (1642, 1642)),
    ((9768, 9772), (1644, 1644)),
    ((9774, 9779), (1646, 1646)),
    ((9792, 9796), (1648, 1648)),
    ((9798, 9803), (1650, 1650)),
    ((9804, 9809), (1651, 1651)),
    ((9822, 9826), (1653, 1653)),
    ((9828, 9833), (1655, 1655)),
    ((9834, 9839), (1656, 1656)),
    ((9852, 9856), (1658, 1658)),
    ((9858, 9863), (1660, 1660)),
    ((9864, 9869), (1661, 1661)),
    ((9882, 9886), (1663, 1663)),
    ((9888, 9893), (1665, 1665)),
    ((9894, 9899), (1666, 1666)),
    ((9912, 9916), (1668, 1668)),
    ((9918, 9923), (1670, 1670)),
    ((9924, 9929), (1671, 1671)),
    ((9942, 9946), (1673, 1673)),
    ((9948, 9953), (1675, 1675)),
    ((9954, 9959), (1676, 1676)),
    ((9972, 9976), (1678, 1678)),
    ((9978, 9983), (1680, 1680)),
    ((9984, 9989), (1681, 1681)),
    ((10002, 10006), (1683, 1683)),
    ((10008, 10013), (1685, 1685)),
    ((10014, 10019), (1686, 1686)),
    ((10032, 10036), (1688, 1688)),
    ((10038, 10043), (1690, 1690)),
    ((10044, 10049), (1691, 1691)),
    ((10062, 10066), (1693, 1693)),
    ((10068, 10073), (1695, 1695)),
    ((10074, 10079), (1696, 1696)),
    ((10092, 10096), (1698, 1698)),
    ((10098, 10103), (1700, 1700)),
    ((10104, 10109), (1701, 1701)),
    ((10122, 10126), (1703, 1703)),
    ((10128, 10133), (1705, 1705)),
    ((10134, 10139), (1706, 1706)),
    ((10152, 10156), (1708, 1708)),
    ((10158, 10163), (1710, 1710)),
    ((10164, 10169), (1711, 1711)),
    ((10182, 10186), (1713, 1713)),
    ((10188, 10193), (1715, 1715)),
    ((10194, 10199), (1716, 1716)),
    ((10212, 10216), (1718, 1718)),
    ((10218, 10223), (1720, 1720)),
    ((10224, 10229), (1721, 1721)),
    ((10242, 10246), (1723, 1723)),
    ((10248, 10253), (1725, 1725)),
    ((10254, 10259), (1726, 1726)),
    ((10272, 10276), (1728, 1728)),
    ((10278, 10283), (1730, 1730)),
    ((10284, 10289), (1731, 1731)),
    ((10302, 10306), (1733, 1733)),
    ((10308, 10313), (1735, 1735)),
    ((10314, 10319), (1736, 1736)),
    ((10332, 10336), (1738, 1738)),
    ((10338, 10343), (1740, 1740)),
    ((10344, 10349), (1741, 1741)),
    ((10362, 10366), (1743, 1743)),
    ((10368, 10373), (1745, 1745)),
    ((10374, 10379), (1746, 1746)),
    ((10392, 10396), (1748, 1748)),
    ((10398, 10403), (1750, 1750)),
    ((10404, 10409), (1751, 1751)),
    ((10422, 10426), (1753, 1753)),
    ((10428, 10433), (1755, 1755)),
    ((10434, 10439), (1756, 1756)),
    ((10452, 10456), (1758, 1758)),
    ((10458, 10463), (1760, 1760)),
    ((10464, 10469), (1761, 1761)),
    ((10482, 10486), (1763, 1763)),
    ((10488, 10493), (1765, 1765)),
    ((10494, 10499), (1766, 1766)),
    ((10512, 10516), (1768, 1768)),
    ((10518, 10523), (1770, 1770)),
    ((10524, 10529), (1771, 1771)),
    ((10542, 10546), (1773, 1773)),
    ((10548, 10553), (1775, 1775)),
    ((10554, 10559), (1776, 1776)),
    ((10572, 10576), (1778, 1778)),
    ((10578, 10583), (1780, 1780)),
    ((10584, 10589), (1781, 1781)),
    ((10602, 10606), (1783, 1783)),
    ((10608, 10613), (1785, 1785)),
    ((10614, 10619), (1786, 1786)),
    ((10632, 10636), (1788, 1788)),
    ((10638, 10643), (1790, 1790)),
    ((10644, 10649), (1791, 1791)),
    ((10662, 10666), (1793, 1793)),
    ((10668, 10673), (1795, 1795)),
    ((10674, 10679), (1796, 1796)),
    ((10692, 10696), (1798, 1798)),
    ((10698, 10703), (1800, 1800)),
    ((10704, 10709), (1801, 1801)),
    ((10722, 10726), (1803, 1803)),
    ((10728, 10733), (1805, 1805)),
    ((10734, 10739), (1806, 1806)),
    ((10752, 10756), (1808, 1808)),
    ((10758, 10763), (1810, 1810)),
    ((10764, 10769), (1811, 1811)),
    ((10782, 10786), (1813, 1813)),
    ((10788, 10793), (1815, 1815)),
    ((10794, 10799), (1816, 1816)),
    ((10812, 10816), (1818, 1818)),
    ((10818, 10823), (1820, 1820)),
    ((10824, 10829), (1821, 1821)),
    ((10842, 10846), (1823, 1823)),
    ((10848, 10853), (1825, 1825)),
    ((10854, 10859), (1826, 1826)),
    ((10872, 10876), (1828, 1828)),
    ((10878, 10883), (1830, 1830)),
    ((10884, 10889), (1831, 1831)),
    ((10902, 10906), (1833, 1833)),
    ((10908, 10913), (1835, 1835)),
    ((10914, 10919), (1836, 1836)),
    ((10932, 10936), (1838, 1838)),
    ((10938, 10943), (1840, 1840)),
    ((10944, 10949), (1841, 1841)),
    ((10962, 10966), (1843, 1843)),
    ((10968, 10973), (1845, 1845)),
    ((10974, 10979), (1846, 1846)),
    ((10992, 10996), (1848, 1848)),
    ((10998, 11003), (1850, 1850)),
    ((11004, 11009), (1851, 1851)),
    ((11022, 11026), (1853, 1853)),
    ((11028, 11033), (1855, 1855)),
    ((11034, 11039), (1856, 1856)),
    ((11052, 11056), (1858, 1858)),
    ((11058, 11063), (1860, 1860)),
    ((11064, 11069), (1861, 1861)),
    ((11082, 11086), (1863, 1863)),
    ((11088, 11093), (1865, 1865)),
    ((11094, 11099), (1866, 1866)),
    ((11112, 11116), (1868, 1868)),
    ((11118, 11123), (1870, 1870)),
    ((11124, 11129), (1871, 1871)),
    ((11142, 11146), (1873, 1873)),
    ((11148, 11153), (1875, 1875)),
    ((11154, 11159), (1876, 1876)),
    ((11172, 11176), (1878, 1878)),
    ((11178, 11183), (1880, 1880)),
    ((11184, 11189), (1881, 1881)),
    ((11202, 11206), (1883, 1883)),
    ((11208, 11213), (1885, 1885)),
    ((11214, 11219), (1886, 1886)),
    ((11232, 11236), (1888, 1888)),
    ((11238, 11243), (1890, 1890)),
    ((11244, 11249), (1891, 1891)),
    ((11262, 11266), (1893, 1893)),
    ((11268, 11273), (1895, 1895)),
    ((11274, 11279), (1896, 1896)),
    ((11292, 11296), (1898, 1898)),
    ((11298, 11303), (1900, 1900)),
    ((11304, 11309), (1901, 1901)),
    ((11322, 11326), (1903, 1903)),
    ((11328, 11333), (1905, 1905)),
    ((11334, 11339), (1906, 1906)),
    ((11352, 11356), (1908, 1908)),
    ((11358, 11363), (1910, 1910)),
    ((11364, 11369), (1911, 1911)),
    ((11382, 11386), (1913, 1913)),
    ((11388, 11393), (1915, 1915)),
    ((11394, 11399), (1916, 1916)),
    ((11412, 11416), (1918, 1918)),
    ((11418, 11423), (1920, 1920)),
    ((11424, 11429), (1921, 1921)),
    ((11442, 11446), (1923, 1923)),
    ((11448, 11453), (1925, 1925)),
    ((11454, 11459), (1926, 1926)),
    ((11472, 11476), (1928, 1928)),
    ((11478, 11483), (1930, 1930)),
    ((11484, 11489), (1931, 1931)),
    ((11502, 11506), (1933, 1933)),
    ((11508, 11513), (1935, 1935)),
    ((11514, 11519), (1936, 1936)),
    ((11532, 11536), (1938, 1938)),
    ((11538, 11543), (1940, 1940)),
    ((11544, 11549), (1941, 1941)),
    ((11562, 11566), (1943, 1943)),
    ((11568, 11573), (1945, 1945)),
    ((11574, 11579), (1946, 1946)),
    ((11592, 11596), (1948, 1948)),
    ((11598, 11603), (1950, 1950)),
    ((11604, 11609), (1951, 1951)),
    ((11622, 11626), (1953, 1953)),
    ((11628, 11633), (1955, 1955)),
    ((11634, 11639), (1956, 1956)),
    ((11652, 11656), (1958, 1958)),
    ((11658, 11663), (1960, 1960)),
    ((11664, 11669), (1961, 1961)),
    ((11682, 11686), (1963, 1963)),
    ((11688, 11693), (1965, 1965)),
    ((11694, 11699), (1966, 1966)),
    ((11712, 11716), (1968, 1968)),
    ((11718, 11723), (1970, 1970)),
    ((11724, 11729), (1971, 1971)),
    ((11742, 11746), (1973, 1973)),
    ((11748, 11753), (1975, 1975)),
    ((11754, 11759), (1976, 1976)),
    ((11772, 11776), (1978, 1978)),
    ((11778, 11783), (1980, 1980)),
    ((11784, 11789), (1981, 1981)),
    ((11790, 11795), (1982, 1982)),
    ((11796, 11801), (1983, 1983)),
    ((11814, 11818), (1985, 1985)),
    ((11820, 11825), (1987, 1987)),
    ((11826, 11831), (1988, 1988)),
    ((11832, 11837), (1989, 1989)),
    ((11838, 11843), (1990, 1990)),
    ((11856, 11860), (1992, 1992)),
    ((11862, 11867), (1994, 1994)),
    ((11868, 11873), (1995, 1995)),
    ((11886, 11890), (1997, 1997)),
    ((11892, 11897), (1999, 1999)),
    ((11898, 11903), (2000, 2000)),
    ((11904, 11909), (2001, 2001)),
    ((11910, 11915), (2002, 2002)),
    ((11928, 11932), (2004, 2004)),
    ((11934, 11939), (2006, 2006)),
    ((11940, 11945), (2007, 2007)),
    ((11946, 11951), (2008, 2008)),
    ((11952, 11957), (2009, 2009)),
    ((11970, 11974), (2011, 2011)),
    ((11976, 11981), (2013, 2013)),
    ((11982, 11987), (2014, 2014)),
    ((11988, 11993), (2015, 2015)),
    ((11994, 11999), (2016, 2016)),
    ((12012, 12016), (2018, 2018)),
    ((12018, 12023), (2020, 2020)),
    ((12024, 12029), (2021, 2021)),
    ((12030, 12035), (2022, 2022)),
    ((12036, 12041), (2023, 2023)),
    ((12054, 12058), (2025, 2025)),
    ((12060, 12065), (2027, 2027)),
    ((12066, 12071), (2028, 2028)),
    ((12072, 12077), (2029, 2029)),
    ((12078, 12083), (2030, 2030)),
    ((12096, 12100), (2032, 2032)),
    ((12102, 12107), (2034, 2034)),
    ((12108, 12113), (2035, 2035)),
    ((12114, 12119), (2036, 2036)),
    ((12120, 12125), (2037, 2037)),
    ((12138, 12142), (2039, 2039)),
    ((12144, 12149), (2041, 2041)),
    ((12150, 12155), (2042, 2042)),
    ((12156, 12161), (2043, 2043)),
    ((12174, 12178), (2045, 2045)),
    ((12180, 12185), (2047, 2047)),
    ((12186, 12191), (2048, 2048)),
    ((12192, 12197), (2049, 2049)),
    ((12210, 12214), (2051, 2051)),
    ((12216, 12221), (2053, 2053)),
    ((12222, 12227), (2054, 2054)),
    ((12228, 12233), (2055, 2055)),
    ((12234, 12239), (2056, 2056)),
    ((12252, 12256), (2058, 2058)),
    ((12258, 12263), (2060, 2060)),
    ((12264, 12269), (2061, 2061)),
    ((12270, 12275), (2062, 2062)),
    ((12276, 12281), (2063, 2063)),
    ((12294, 12298), (2065, 2065)),
    ((12300, 12305), (2067, 2067)),
    ((12306, 12311), (2068, 2068)),
    ((12312, 12317), (2069, 2069)),
    ((12318, 12323), (2070, 2070)),
    ((12336, 12340), (2072, 2072)),
    ((12342, 12347), (2074, 2074)),
    ((12348, 12353), (2075, 2075)),
    ((12354, 12359), (2076, 2076)),
    ((12360, 12365), (2077, 2077)),
    ((12378, 12382), (2079, 2079)),
    ((12384, 12389), (2081, 2081)),
    ((12390, 12395), (2082, 2082)),
    ((12396, 12401), (2083, 2083)),
    ((12414, 12418), (2085, 2085)),
    ((12420, 12425), (2087, 2087)),
    ((12426, 12431), (2088, 2088)),
    ((12432, 12437), (2089, 2089)),
    ((12438, 12443), (2090, 2090)),
    ((12444, 12444), (2091, 2091)),
    ((12445, 12450), (2092, 2092)),
    ((12463, 12467), (2094, 2094)),
    ((12469, 12474), (2096, 2096)),
    ((12475, 12480), (2097, 2097)),
    ((12481, 12486), (2098, 2098)),
    ((12487, 12492), (2099, 2099)),
    ((12493, 12493), (2100, 2100)),
    ((12494, 12499), (2101, 2101)),
    ((12512, 12516), (2103, 2103)),
    ((12518, 12523), (2105, 2105)),
    ((12524, 12529), (2106, 2106)),
    ((12530, 12535), (2107, 2107)),
    ((12536, 12541), (2108, 2108)),
    ((12542, 12542), (2109, 2109)),
    ((12543, 12548), (2110, 2110)),
    ((12561, 12565), (2112, 2112)),
    ((12567, 12572), (2114, 2114)),
    ((12573, 12578), (2115, 2115)),
    ((12579, 12584), (2116, 2116)),
    ((12585, 12590), (2117, 2117)),
    ((12591, 12591), (2118, 2118)),
    ((12592, 12597), (2119, 2119)),
    ((12610, 12614), (2121, 2121)),
    ((12616, 12621), (2123, 2123)),
    ((12622, 12627), (2124, 2124)),
    ((12628, 12633), (2125, 2125)),
    ((12634, 12639), (2126, 2126)),
    ((12640, 12640), (2127, 2127)),
    ((12641, 12646), (2128, 2128)),
    ((12659, 12663), (2130, 2130)),
    ((12665, 12670), (2132, 2132)),
    ((12671, 12676), (2133, 2133)),
    ((12677, 12682), (2134, 2134)),
    ((12683, 12688), (2135, 2135)),
    ((12689, 12689), (2136, 2136)),
    ((12690, 12695), (2137, 2137)),
    ((12708, 12712), (2139, 2139)),
    ((12714, 12719), (2141, 2141)),
    ((12720, 12725), (2142, 2142)),
    ((12726, 12731), (2143, 2143)),
    ((12732, 12737), (2144, 2144)),
    ((12738, 12738), (2145, 2145)),
    ((12739, 12744), (2146, 2146)),
    ((12757, 12761), (2148, 2148)),
    ((12763, 12768), (2150, 2150)),
    ((12769, 12774), (2151, 2151)),
    ((12775, 12780), (2152, 2152)),
    ((12781, 12786), (2153, 2153)),
    ((12787, 12787), (2154, 2154)),
    ((12788, 12793), (2155, 2155)),
    ((12806, 12810), (2157, 2157)),
    ((12812, 12817), (2159, 2159)),
    ((12818, 12823), (2160, 2160)),
    ((12824, 12829), (2161, 2161)),
    ((12830, 12835), (2162, 2162)),
    ((12836, 12836), (2163, 2163)),
    ((12837, 12842), (2164, 2164)),
    ((12855, 12859), (2166, 2166)),
    ((12861, 12866), (2168, 2168)),
    ((12867, 12872), (2169, 2169)),
    ((12873, 12878), (2170, 2170)),
    ((12879, 12884), (2171, 2171)),
    ((12885, 12885), (2172, 2172)),
    ((12886, 12891), (2173, 2173)),
    ((12904, 12908), (2175, 2175)),
    ((12910, 12915), (2177, 2177)),
    ((12916, 12921), (2178, 2178)),
    ((12922, 12927), (2179, 2179)),
    ((12928, 12933), (2180, 2180)),
    ((12934, 12934), (2181, 2181)),
    ((12935, 12940), (2182, 2182)),
    ((12953, 12957), (2184, 2184)),
    ((12959, 12964), (2186, 2186)),
    ((12965, 12970), (2187, 2187)),
    ((12971, 12976), (2188, 2188)),
    ((12977, 12982), (2189, 2189)),
    ((12983, 12983), (2190, 2190)),
    ((12984, 12989), (2191, 2191)),
    ((13002, 13006), (2193, 2193)),
    ((13008, 13013), (2195, 2195)),
    ((13026, 13030), (2197, 2197)),
    ((13032, 13037), (2199, 2199)),
    ((13038, 13043), (2200, 2200)),
    ((13056, 13060), (2202, 2202)),
    ((13062, 13067), (2204, 2204)),
    ((13068, 13073), (2205, 2205)),
    ((13086, 13090), (2207, 2207)),
    ((13092, 13097), (2209, 2209)),
    ((13098, 13103), (2210, 2210)),
    ((13116, 13120), (2212, 2212)),
    ((13122, 13127), (2214, 2214)),
    ((13128, 13133), (2215, 2215)),
    ((13146, 13150), (2217, 2217)),
    ((13152, 13157), (2219, 2219)),
    ((13158, 13163), (2220, 2220)),
    ((13176, 13180), (2222, 2222)),
    ((13182, 13187), (2224, 2224)),
    ((13188, 13193), (2225, 2225)),
    ((13206, 13210), (2227, 2227)),
    ((13212, 13217), (2229, 2229)),
    ((13218, 13223), (2230, 2230)),
    ((13236, 13240), (2232, 2232)),
    ((13242, 13247), (2234, 2234)),
    ((13248, 13253), (2235, 2235)),
    ((13266, 13270), (2237, 2237)),
    ((13272, 13277), (2239, 2239)),
    ((13278, 13283), (2240, 2240)),
    ((13296, 13300), (2242, 2242)),
    ((13302, 13307), (2244, 2244)),
    ((13308, 13313), (2245, 2245)),
    ((13326, 13330), (2247, 2247)),
    ((13332, 13337), (2249, 2249)),
    ((13338, 13343), (2250, 2250)),
    ((13356, 13360), (2252, 2252)),
    ((13362, 13367), (2254, 2254)),
    ((13368, 13373), (2255, 2255)),
    ((13386, 13390), (2257, 2257)),
    ((13392, 13397), (2259, 2259)),
    ((13398, 13403), (2260, 2260)),
    ((13416, 13420), (2262, 2262)),
    ((13422, 13427), (2264, 2264)),
    ((13428, 13433), (2265, 2265)),
    ((13446, 13450), (2267, 2267)),
    ((13452, 13457), (2269, 2269)),
    ((13458, 13463), (2270, 2270)),
    ((13476, 13480), (2272, 2272)),
    ((13482, 13487), (2274, 2274)),
    ((13488, 13493), (2275, 2275)),
    ((13506, 13510), (2277, 2277)),
    ((13512, 13517), (2279, 2279)),
    ((13518, 13523), (2280, 2280)),
    ((13536, 13540), (2282, 2282)),
    ((13542, 13547), (2284, 2284)),
    ((13548, 13553), (2285, 2285)),
    ((13566, 13570), (2287, 2287)),
    ((13572, 13577), (2289, 2289)),
    ((13578, 13583), (2290, 2290)),
    ((13596, 13600), (2292, 2292)),
    ((13602, 13607), (2294, 2294)),
    ((13608, 13613), (2295, 2295)),
    ((13626, 13630), (2297, 2297)),
    ((13632, 13637), (2299, 2299)),
    ((13638, 13643), (2300, 2300)),
    ((13656, 13660), (2302, 2302)),
    ((13662, 13667), (2304, 2304)),
    ((13668, 13673), (2305, 2305)),
    ((13686, 13690), (2307, 2307)),
    ((13692, 13697), (2309, 2309)),
    ((13698, 13703), (2310, 2310)),
    ((13716, 13720), (2312, 2312)),
    ((13722, 13727), (2314, 2314)),
    ((13728, 13733), (2315, 2315)),
    ((13746, 13750), (2317, 2317)),
    ((13752, 13757), (2319, 2319)),
    ((13758, 13763), (2320, 2320)),
    ((13776, 13780), (2322, 2322)),
    ((13782, 13787), (2324, 2324)),
    ((13788, 13793), (2325, 2325)),
    ((13806, 13810), (2327, 2327)),
    ((13812, 13817), (2329, 2329)),
    ((13818, 13823), (2330, 2330)),
    ((13836, 13840), (2332, 2332)),
    ((13842, 13847), (2334, 2334)),
    ((13848, 13853), (2335, 2335)),
    ((13866, 13870), (2337, 2337)),
    ((13872, 13877), (2339, 2339)),
    ((13878, 13883), (2340, 2340)),
    ((13896, 13900), (2342, 2342)),
    ((13902, 13907), (2344, 2344)),
    ((13908, 13913), (2345, 2345)),
    ((13926, 13930), (2347, 2347)),
    ((13932, 13937), (2349, 2349)),
    ((13938, 13943), (2350, 2350)),
    ((13956, 13960), (2352, 2352)),
    ((13962, 13967), (2354, 2354)),
    ((13968, 13973), (2355, 2355)),
    ((13986, 13990), (2357, 2357)),
    ((13992, 13997), (2359, 2359)),
    ((13998, 14003), (2360, 2360)),
    ((14016, 14020), (2362, 2362)),
    ((14022, 14027), (2364, 2364)),
    ((14028, 14033), (2365, 2365)),
    ((14046, 14050), (2367, 2367)),
    ((14052, 14057), (2369, 2369)),
    ((14058, 14063), (2370, 2370)),
    ((14076, 14080), (2372, 2372)),
    ((14082, 14087), (2374, 2374)),
    ((14088, 14093), (2375, 2375)),
    ((14106, 14110), (2377, 2377)),
    ((14112, 14117), (2379, 2379)),
    ((14118, 14123), (2380, 2380)),
    ((14136, 14140), (2382, 2382)),
    ((14142, 14147), (2384, 2384)),
    ((14148, 14153), (2385, 2385)),
    ((14166, 14170), (2387, 2387)),
    ((14172, 14177), (2389, 2389)),
    ((14178, 14183), (2390, 2390)),
    ((14196, 14200), (2392, 2392)),
    ((14202, 14207), (2394, 2394)),
    ((14208, 14213), (2395, 2395)),
    ((14226, 14230), (2397, 2397)),
    ((14232, 14237), (2399, 2399)),
    ((14238, 14243), (2400, 2400)),
    ((14256, 14260), (2402, 2402)),
    ((14262, 14267), (2404, 2404)),
    ((14268, 14273), (2405, 2405)),
    ((14286, 14290), (2407, 2407)),
    ((14292, 14297), (2409, 2409)),
    ((14298, 14303), (2410, 2410)),
    ((14316, 14320), (2412, 2412)),
    ((14322, 14327), (2414, 2414)),
    ((14328, 14333), (2415, 2415)),
    ((14346, 14350), (2417, 2417)),
    ((14352, 14357), (2419, 2419)),
    ((14358, 14363), (2420, 2420)),
    ((14376, 14380), (2422, 2422)),
    ((14382, 14387), (2424, 2424)),
    ((14388, 14393), (2425, 2425)),
    ((14406, 14410), (2427, 2427)),
    ((14412, 14417), (2429, 2429)),
    ((14418, 14423), (2430, 2430)),
    ((14436, 14440), (2432, 2432)),
    ((14442, 14447), (2434, 2434)),
    ((14448, 14453), (2435, 2435)),
    ((14466, 14470), (2437, 2437)),
    ((14472, 14477), (2439, 2439)),
    ((14478, 14483), (2440, 2440)),
    ((14496, 14500), (2442, 2442)),
    ((14502, 14507), (2444, 2444)),
    ((14508, 14513), (2445, 2445)),
    ((14526, 14530), (2447, 2447)),
    ((14532, 14537), (2449, 2449)),
    ((14538, 14543), (2450, 2450)),
    ((14556, 14560), (2452, 2452)),
    ((14562, 14567), (2454, 2454)),
    ((14568, 14573), (2455, 2455)),
    ((14586, 14590), (2457, 2457)),
    ((14592, 14597), (2459, 2459)),
    ((14598, 14603), (2460, 2460)),
    ((14616, 14620), (2462, 2462)),
    ((14622, 14627), (2464, 2464)),
    ((14628, 14633), (2465, 2465)),
    ((14646, 14650), (2467, 2467)),
    ((14652, 14657), (2469, 2469)),
    ((14658, 14663), (2470, 2470)),
    ((14676, 14680), (2472, 2472)),
    ((14682, 14687), (2474, 2474)),
    ((14688, 14693), (2475, 2475)),
    ((14706, 14710), (2477, 2477)),
    ((14712, 14717), (2479, 2479)),
    ((14718, 14723), (2480, 2480)),
    ((14736, 14740), (2482, 2482)),
    ((14742, 14747), (2484, 2484)),
    ((14748, 14753), (2485, 2485)),
    ((14766, 14770), (2487, 2487)),
    ((14772, 14777), (2489, 2489)),
    ((14778, 14783), (2490, 2490)),
    ((14796, 14800), (2492, 2492)),
    ((14802, 14807), (2494, 2494)),
    ((14808, 14813), (2495, 2495)),
    ((14826, 14830), (2497, 2497)),
    ((14832, 14837), (2499, 2499)),
    ((14838, 14843), (2500, 2500)),
    ((14856, 14860), (2502, 2502)),
    ((14862, 14867), (2504, 2504)),
    ((14868, 14873), (2505, 2505)),
    ((14886, 14890), (2507, 2507)),
    ((14892, 14897), (2509, 2509)),
    ((14898, 14903), (2510, 2510)),
    ((14916, 14920), (2512, 2512)),
    ((14922, 14927), (2514, 2514)),
    ((14928, 14933), (2515, 2515)),
    ((14946, 14950), (2517, 2517)),
    ((14952, 14957), (2519, 2519)),
    ((14958, 14963), (2520, 2520)),
    ((14976, 14980), (2522, 2522)),
    ((14982, 14987), (2524, 2524)),
    ((14988, 14993), (2525, 2525)),
    ((15006, 15010), (2527, 2527)),
    ((15012, 15017), (2529, 2529)),
    ((15030, 15034), (2531, 2531)),
    ((15036, 15041), (2533, 2533)),
    ((15042, 15047), (2534, 2534)),
    ((15060, 15064), (2536, 2536)),
    ((15066, 15071), (2538, 2538)),
    ((15072, 15077), (2539, 2539)),
    ((15090, 15094), (2541, 2541)),
    ((15096, 15101), (2543, 2543)),
    ((15102, 15107), (2544, 2544)),
    ((15120, 15124), (2546, 2546)),
    ((15126, 15131), (2548, 2548)),
    ((15132, 15137), (2549, 2549)),
    ((15150, 15154), (2551, 2551)),
    ((15156, 15161), (2553, 2553)),
    ((15162, 15167), (2554, 2554)),
    ((15180, 15184), (2556, 2556)),
    ((15186, 15191), (2558, 2558)),
    ((15192, 15197), (2559, 2559)),
    ((15210, 15214), (2561, 2561)),
    ((15216, 15221), (2563, 2563)),
    ((15222, 15227), (2564, 2564)),
    ((15240, 15244), (2566, 2566)),
    ((15246, 15251), (2568, 2568)),
    ((15252, 15257), (2569, 2569)),
    ((15270, 15274), (2571, 2571)),
    ((15276, 15281), (2573, 2573)),
    ((15282, 15287), (2574, 2574)),
    ((15300, 15304), (2576, 2576)),
    ((15306, 15311), (2578, 2578)),
    ((15312, 15317), (2579, 2579)),
    ((15330, 15334), (2581, 2581)),
    ((15336, 15341), (2583, 2583)),
    ((15342, 15347), (2584, 2584)),
    ((15360, 15364), (2586, 2586)),
    ((15366, 15371), (2588, 2588)),
    ((15372, 15377), (2589, 2589)),
    ((15390, 15394), (2591, 2591)),
    ((15396, 15401), (2593, 2593)),
    ((15402, 15407), (2594, 2594)),
    ((15420, 15424), (2596, 2596)),
    ((15426, 15431), (2598, 2598)),
    ((15432, 15437), (2599, 2599)),
    ((15450, 15454), (2601, 2601)),
    ((15456, 15461), (2603, 2603)),
    ((15462, 15467), (2604, 2604)),
    ((15480, 15484), (2606, 2606)),
    ((15486, 15491), (2608, 2608)),
    ((15492, 15497), (2609, 2609)),
    ((15510, 15514), (2611, 2611)),
    ((15516, 15521), (2613, 2613)),
    ((15522, 15527), (2614, 2614)),
    ((15540, 15544), (2616, 2616)),
    ((15546, 15551), (2618, 2618)),
    ((15552, 15557), (2619, 2619)),
    ((15570, 15574), (2621, 2621)),
    ((15576, 15581), (2623, 2623)),
    ((15582, 15587), (2624, 2624)),
    ((15600, 15604), (2626, 2626)),
    ((15606, 15611), (2628, 2628)),
    ((15612, 15617), (2629, 2629)),
    ((15630, 15634), (2631, 2631)),
    ((15636, 15641), (2633, 2633)),
    ((15642, 15647), (2634, 2634)),
    ((15660, 15664), (2636, 2636)),
    ((15666, 15671), (2638, 2638)),
    ((15672, 15677), (2639, 2639)),
    ((15690, 15694), (2641, 2641)),
    ((15696, 15701), (2643, 2643)),
    ((15702, 15707), (2644, 2644)),
    ((15720, 15724), (2646, 2646)),
    ((15726, 15731), (2648, 2648)),
    ((15732, 15737), (2649, 2649)),
    ((15750, 15754), (2651, 2651)),
    ((15756, 15761), (2653, 2653)),
    ((15762, 15767), (2654, 2654)),
    ((15780, 15784), (2656, 2656)),
    ((15786, 15791), (2658, 2658)),
    ((15792, 15797), (2659, 2659)),
    ((15810, 15814), (2661, 2661)),
    ((15816, 15821), (2663, 2663)),
    ((15822, 15827), (2664, 2664)),
    ((15840, 15844), (2666, 2666)),
    ((15846, 15851), (2668, 2668)),
    ((15852, 15857), (2669, 2669)),
    ((15870, 15874), (2671, 2671)),
    ((15876, 15881), (2673, 2673)),
    ((15882, 15887), (2674, 2674)),
    ((15900, 15904), (2676, 2676)),
    ((15906, 15911), (2678, 2678)),
    ((15912, 15917), (2679, 2679)),
    ((15930, 15934), (2681, 2681)),
    ((15936, 15941), (2683, 2683)),
    ((15942, 15947), (2684, 2684)),
    ((15960, 15964), (2686, 2686)),
    ((15966, 15971), (2688, 2688)),
    ((15972, 15977), (2689, 2689)),
    ((15990, 15994), (2691, 2691)),
    ((15996, 16001), (2693, 2693)),
    ((16002, 16007), (2694, 2694)),
    ((16020, 16024), (2696, 2696)),
    ((16026, 16031), (2698, 2698)),
    ((16032, 16037), (2699, 2699)),
    ((16050, 16054), (2701, 2701)),
    ((16056, 16061), (2703, 2703)),
    ((16062, 16067), (2704, 2704)),
    ((16080, 16084), (2706, 2706)),
    ((16086, 16091), (2708, 2708)),
    ((16092, 16097), (2709, 2709)),
    ((16110, 16114), (2711, 2711)),
    ((16116, 16121), (2713, 2713)),
    ((16122, 16127), (2714, 2714)),
    ((16140, 16144), (2716, 2716)),
    ((16146, 16151), (2718, 2718)),
    ((16152, 16157), (2719, 2719)),
    ((16170, 16174), (2721, 2721)),
    ((16176, 16181), (2723, 2723)),
    ((16182, 16187), (2724, 2724)),
    ((16200, 16204), (2726, 2726)),
    ((16206, 16211), (2728, 2728)),
    ((16212, 16217), (2729, 2729)),
    ((16230, 16234), (2731, 2731)),
    ((16236, 16241), (2733, 2733)),
    ((16242, 16247), (2734, 2734)),
    ((16260, 16264), (2736, 2736)),
    ((16266, 16271), (2738, 2738)),
    ((16272, 16277), (2739, 2739)),
    ((16290, 16294), (2741, 2741)),
    ((16296, 16301), (2743, 2743)),
    ((16302, 16307), (2744, 2744)),
    ((16320, 16324), (2746, 2746)),
    ((16326, 16331), (2748, 2748)),
    ((16332, 16337), (2749, 2749)),
    ((16350, 16354), (2751, 2751)),
    ((16356, 16361), (2753, 2753)),
    ((16362, 16367), (2754, 2754)),
    ((16380, 16384), (2756, 2756)),
    ((16386, 16391), (2758, 2758)),
    ((16392, 16397), (2759, 2759)),
    ((16410, 16414), (2761, 2761)),
    ((16416, 16421), (2763, 2763)),
    ((16422, 16427), (2764, 2764)),
    ((16440, 16444), (2766, 2766)),
    ((16446, 16451), (2768, 2768)),
    ((16452, 16457), (2769, 2769)),
    ((16470, 16474), (2771, 2771)),
    ((16476, 16481), (2773, 2773)),
    ((16482, 16487), (2774, 2774)),
    ((16500, 16504), (2776, 2776)),
    ((16506, 16511), (2778, 2778)),
    ((16512, 16517), (2779, 2779)),
    ((16530, 16534), (2781, 2781)),
    ((16536, 16541), (2783, 2783)),
    ((16542, 16547), (2784, 2784)),
    ((16560, 16564), (2786, 2786)),
    ((16566, 16571), (2788, 2788)),
    ((16572, 16577), (2789, 2789)),
    ((16590, 16594), (2791, 2791)),
    ((16596, 16601), (2793, 2793)),
    ((16602, 16607), (2794, 2794)),
    ((16620, 16624), (2796, 2796)),
    ((16626, 16631), (2798, 2798)),
    ((16632, 16637), (2799, 2799)),
    ((16650, 16654), (2801, 2801)),
    ((16656, 16661), (2803, 2803)),
    ((16662, 16667), (2804, 2804)),
    ((16680, 16684), (2806, 2806)),
    ((16686, 16691), (2808, 2808)),
    ((16692, 16697), (2809, 2809)),
    ((16710, 16714), (2811, 2811)),
    ((16716, 16721), (2813, 2813)),
    ((16722, 16727), (2814, 2814)),
    ((16740, 16744), (2816, 2816)),
    ((16746, 16751), (2818, 2818)),
    ((16752, 16757), (2819, 2819)),
    ((16770, 16774), (2821, 2821)),
    ((16776, 16781), (2823, 2823)),
    ((16782, 16787), (2824, 2824)),
    ((16800, 16804), (2826, 2826)),
    ((16806, 16811), (2828, 2828)),
    ((16812, 16817), (2829, 2829)),
    ((16830, 16834), (2831, 2831)),
    ((16836, 16841), (2833, 2833)),
    ((16842, 16847), (2834, 2834)),
    ((16860, 16864), (2836, 2836)),
    ((16866, 16871), (2838, 2838)),
    ((16872, 16877), (2839, 2839)),
    ((16890, 16894), (2841, 2841)),
    ((16896, 16901), (2843, 2843)),
    ((16902, 16907), (2844, 2844)),
    ((16920, 16924), (2846, 2846)),
    ((16926, 16931), (2848, 2848)),
    ((16932, 16937), (2849, 2849)),
    ((16950, 16954), (2851, 2851)),
    ((16956, 16961), (2853, 2853)),
    ((16962, 16967), (2854, 2854)),
    ((16980, 16984), (2856, 2856)),
    ((16986, 16991), (2858, 2858)),
    ((16992, 16997), (2859, 2859)),
    ((17010, 17014), (2861, 2861)),
    ((17016, 17021), (2863, 2863)),
    ((17034, 17038), (2865, 2865)),
    ((17040, 17045), (2867, 2867)),
    ((17046, 17051), (2868, 2868)),
    ((17064, 17068), (2870, 2870)),
    ((17070, 17075), (2872, 2872)),
    ((17076, 17081), (2873, 2873)),
    ((17094, 17098), (2875, 2875)),
    ((17100, 17105), (2877, 2877)),
    ((17106, 17111), (2878, 2878)),
    ((17124, 17128), (2880, 2880)),
    ((17130, 17135), (2882, 2882)),
    ((17136, 17141), (2883, 2883)),
    ((17154, 17158), (2885, 2885)),
    ((17160, 17165), (2887, 2887)),
    ((17166, 17171), (2888, 2888)),
    ((17184, 17188), (2890, 2890)),
    ((17190, 17195), (2892, 2892)),
    ((17196, 17201), (2893, 2893)),
    ((17214, 17218), (2895, 2895)),
    ((17220, 17225), (2897, 2897)),
    ((17226, 17231), (2898, 2898)),
    ((17244, 17248), (2900, 2900)),
    ((17250, 17255), (2902, 2902)),
    ((17256, 17261), (2903, 2903)),
    ((17274, 17278), (2905, 2905)),
    ((17280, 17285), (2907, 2907)),
    ((17286, 17291), (2908, 2908)),
    ((17304, 17308), (2910, 2910)),
    ((17310, 17315), (2912, 2912)),
    ((17316, 17321), (2913, 2913)),
    ((17334, 17338), (2915, 2915)),
    ((17340, 17345), (2917, 2917)),
    ((17346, 17351), (2918, 2918)),
    ((17364, 17368), (2920, 2920)),
    ((17370, 17375), (2922, 2922)),
    ((17376, 17381), (2923, 2923)),
    ((17394, 17398), (2925, 2925)),
    ((17400, 17405), (2927, 2927)),
    ((17406, 17411), (2928, 2928)),
    ((17424, 17428), (2930, 2930)),
    ((17430, 17435), (2932, 2932)),
    ((17436, 17441), (2933, 2933)),
    ((17454, 17458), (2935, 2935)),
    ((17460, 17465), (2937, 2937)),
    ((17466, 17471), (2938, 2938)),
    ((17484, 17488), (2940, 2940)),
    ((17490, 17495), (2942, 2942)),
    ((17496, 17501), (2943, 2943)),
    ((17514, 17518), (2945, 2945)),
    ((17520, 17525), (2947, 2947)),
    ((17526, 17531), (2948, 2948)),
    ((17544, 17548), (2950, 2950)),
    ((17550, 17555), (2952, 2952)),
    ((17556, 17561), (2953, 2953)),
    ((17574, 17578), (2955, 2955)),
    ((17580, 17585), (2957, 2957)),
    ((17586, 17591), (2958, 2958)),
    ((17604, 17608), (2960, 2960)),
    ((17610, 17615), (2962, 2962)),
    ((17616, 17621), (2963, 2963)),
    ((17634, 17638), (2965, 2965)),
    ((17640, 17645), (2967, 2967)),
    ((17646, 17651), (2968, 2968)),
    ((17664, 17668), (2970, 2970)),
    ((17670, 17675), (2972, 2972)),
    ((17676, 17681), (2973, 2973)),
    ((17694, 17698), (2975, 2975)),
    ((17700, 17705), (2977, 2977)),
    ((17706, 17711), (2978, 2978)),
    ((17724, 17728), (2980, 2980)),
    ((17730, 17735), (2982, 2982)),
    ((17736, 17741), (2983, 2983)),
    ((17754, 17758), (2985, 2985)),
    ((17760, 17765), (2987, 2987)),
    ((17766, 17771), (2988, 2988)),
    ((17784, 17788), (2990, 2990)),
    ((17790, 17795), (2992, 2992)),
    ((17796, 17801), (2993, 2993)),
    ((17814, 17818), (2995, 2995)),
    ((17820, 17825), (2997, 2997)),
    ((17826, 17831), (2998, 2998)),
    ((17844, 17848), (3000, 3000)),
    ((17850, 17855), (3002, 3002)),
    ((17856, 17861), (3003, 3003)),
    ((17874, 17878), (3005, 3005)),
    ((17880, 17885), (3007, 3007)),
    ((17886, 17891), (3008, 3008)),
    ((17904, 17908), (3010, 3010)),
    ((17910, 17915), (3012, 3012)),
    ((17916, 17921), (3013, 3013)),
    ((17934, 17938), (3015, 3015)),
    ((17940, 17945), (3017, 3017)),
    ((17946, 17951), (3018, 3018)),
    ((17964, 17968), (3020, 3020)),
    ((17970, 17975), (3022, 3022)),
    ((17976, 17981), (3023, 3023)),
    ((17994, 17998), (3025, 3025)),
    ((18000, 18005), (3027, 3027)),
    ((18006, 18011), (3028, 3028)),
    ((18024, 18028), (3030, 3030)),
    ((18030, 18035), (3032, 3032)),
    ((18036, 18041), (3033, 3033)),
    ((18054, 18058), (3035, 3035)),
    ((18060, 18065), (3037, 3037)),
    ((18066, 18071), (3038, 3038)),
    ((18084, 18088), (3040, 3040)),
    ((18090, 18095), (3042, 3042)),
    ((18096, 18101), (3043, 3043)),
    ((18114, 18118), (3045, 3045)),
    ((18120, 18125), (3047, 3047)),
    ((18126, 18131), (3048, 3048)),
    ((18144, 18148), (3050, 3050)),
    ((18150, 18155), (3052, 3052)),
    ((18156, 18161), (3053, 3053)),
    ((18174, 18178), (3055, 3055)),
    ((18180, 18185), (3057, 3057)),
    ((18186, 18191), (3058, 3058)),
    ((18204, 18208), (3060, 3060)),
    ((18210, 18215), (3062, 3062)),
    ((18216, 18221), (3063, 3063)),
    ((18234, 18238), (3065, 3065)),
    ((18240, 18245), (3067, 3067)),
    ((18246, 18251), (3068, 3068)),
    ((18264, 18268), (3070, 3070)),
    ((18270, 18275), (3072, 3072)),
    ((18276, 18281), (3073, 3073)),
    ((18294, 18298), (3075, 3075)),
    ((18300, 18305), (3077, 3077)),
    ((18306, 18311), (3078, 3078)),
    ((18324, 18328), (3080, 3080)),
    ((18330, 18335), (3082, 3082)),
    ((18336, 18341), (3083, 3083)),
    ((18354, 18358), (3085, 3085)),
    ((18360, 18365), (3087, 3087)),
    ((18366, 18371), (3088, 3088)),
    ((18384, 18388), (3090, 3090)),
    ((18390, 18395), (3092, 3092)),
    ((18396, 18401), (3093, 3093)),
    ((18414, 18418), (3095, 3095)),
    ((18420, 18425), (3097, 3097)),
    ((18426, 18431), (3098, 3098)),
    ((18444, 18448), (3100, 3100)),
    ((18450, 18455), (3102, 3102)),
    ((18456, 18461), (3103, 3103)),
    ((18474, 18478), (3105, 3105)),
    ((18480, 18485), (3107, 3107)),
    ((18486, 18491), (3108, 3108)),
    ((18504, 18508), (3110, 3110)),
    ((18510, 18515), (3112, 3112)),
    ((18516, 18521), (3113, 3113)),
    ((18534, 18538), (3115, 3115)),
    ((18540, 18545), (3117, 3117)),
    ((18546, 18551), (3118, 3118)),
    ((18564, 18568), (3120, 3120)),
    ((18570, 18575), (3122, 3122)),
    ((18576, 18581), (3123, 3123)),
    ((18594, 18598), (3125, 3125)),
    ((18600, 18605), (3127, 3127)),
    ((18606, 18611), (3128, 3128)),
    ((18624, 18628), (3130, 3130)),
    ((18630, 18635), (3132, 3132)),
    ((18636, 18641), (3133, 3133)),
    ((18654, 18658), (3135, 3135)),
    ((18660, 18665), (3137, 3137)),
    ((18666, 18671), (3138, 3138)),
    ((18684, 18688), (3140, 3140)),
    ((18690, 18695), (3142, 3142)),
    ((18696, 18701), (3143, 3143)),
    ((18714, 18718), (3145, 3145)),
    ((18720, 18725), (3147, 3147)),
    ((18726, 18731), (3148, 3148)),
    ((18744, 18748), (3150, 3150)),
    ((18750, 18755), (3152, 3152)),
    ((18756, 18761), (3153, 3153)),
    ((18774, 18778), (3155, 3155)),
    ((18780, 18785), (3157, 3157)),
    ((18786, 18791), (3158, 3158)),
    ((18804, 18808), (3160, 3160)),
    ((18810, 18815), (3162, 3162)),
    ((18816, 18821), (3163, 3163)),
    ((18834, 18838), (3165, 3165)),
    ((18840, 18845), (3167, 3167)),
    ((18846, 18851), (3168, 3168)),
    ((18864, 18868), (3170, 3170)),
    ((18870, 18875), (3172, 3172)),
    ((18876, 18881), (3173, 3173)),
    ((18894, 18898), (3175, 3175)),
    ((18900, 18905), (3177, 3177)),
    ((18906, 18911), (3178, 3178)),
    ((18924, 18928), (3180, 3180)),
    ((18930, 18935), (3182, 3182)),
    ((18936, 18941), (3183, 3183)),
    ((18954, 18958), (3185, 3185)),
    ((18960, 18965), (3187, 3187)),
    ((18966, 18971), (3188, 3188)),
    ((18984, 18988), (3190, 3190)),
    ((18990, 18995), (3192, 3192)),
    ((18996, 19001), (3193, 3193)),
    ((19014, 19018), (3195, 3195)),
    ((19020, 19025), (3197, 3197)),
    ((19038, 19042), (3199, 3199)),
    ((19044, 19049), (3201, 3201)),
    ((19050, 19055), (3202, 3202)),
    ((19068, 19072), (3204, 3204)),
    ((19074, 19079), (3206, 3206)),
    ((19080, 19085), (3207, 3207)),
    ((19098, 19102), (3209, 3209)),
    ((19104, 19109), (3211, 3211)),
    ((19110, 19115), (3212, 3212)),
    ((19128, 19132), (3214, 3214)),
    ((19134, 19139), (3216, 3216)),
    ((19140, 19145), (3217, 3217)),
    ((19158, 19162), (3219, 3219)),
    ((19164, 19169), (3221, 3221)),
    ((19170, 19175), (3222, 3222)),
    ((19188, 19192), (3224, 3224)),
    ((19194, 19199), (3226, 3226)),
    ((19200, 19205), (3227, 3227)),
    ((19218, 19222), (3229, 3229)),
    ((19224, 19229), (3231, 3231)),
    ((19230, 19235), (3232, 3232)),
    ((19248, 19252), (3234, 3234)),
    ((19254, 19259), (3236, 3236)),
    ((19260, 19265), (3237, 3237)),
    ((19278, 19282), (3239, 3239)),
    ((19284, 19289), (3241, 3241)),
    ((19290, 19295), (3242, 3242)),
    ((19308, 19312), (3244, 3244)),
    ((19314, 19319), (3246, 3246)),
    ((19320, 19325), (3247, 3247)),
    ((19338, 19342), (3249, 3249)),
    ((19344, 19349), (3251, 3251)),
    ((19350, 19355), (3252, 3252)),
    ((19368, 19372), (3254, 3254)),
    ((19374, 19379), (3256, 3256)),
    ((19380, 19385), (3257, 3257)),
    ((19398, 19402), (3259, 3259)),
    ((19404, 19409), (3261, 3261)),
    ((19410, 19415), (3262, 3262)),
    ((19428, 19432), (3264, 3264)),
    ((19434, 19439), (3266, 3266)),
    ((19440, 19445), (3267, 3267)),
    ((19458, 19462), (3269, 3269)),
    ((19464, 19469), (3271, 3271)),
    ((19470, 19475), (3272, 3272)),
    ((19488, 19492), (3274, 3274)),
    ((19494, 19499), (3276, 3276)),
    ((19500, 19505), (3277, 3277)),
    ((19518, 19522), (3279, 3279)),
    ((19524, 19529), (3281, 3281)),
    ((19530, 19535), (3282, 3282)),
    ((19548, 19552), (3284, 3284)),
    ((19554, 19559), (3286, 3286)),
    ((19560, 19565), (3287, 3287)),
    ((19578, 19582), (3289, 3289)),
    ((19584, 19589), (3291, 3291)),
    ((19590, 19595), (3292, 3292)),
    ((19608, 19612), (3294, 3294)),
    ((19614, 19619), (3296, 3296)),
    ((19620, 19625), (3297, 3297)),
    ((19638, 19642), (3299, 3299)),
    ((19644, 19649), (3301, 3301)),
    ((19650, 19655), (3302, 3302)),
    ((19668, 19672), (3304, 3304)),
    ((19674, 19679), (3306, 3306)),
    ((19680, 19685), (3307, 3307)),
    ((19698, 19702), (3309, 3309)),
    ((19704, 19709), (3311, 3311)),
    ((19710, 19715), (3312, 3312)),
    ((19728, 19732), (3314, 3314)),
    ((19734, 19739), (3316, 3316)),
    ((19740, 19745), (3317, 3317)),
    ((19758, 19762), (3319, 3319)),
    ((19764, 19769), (3321, 3321)),
    ((19770, 19775), (3322, 3322)),
    ((19788, 19792), (3324, 3324)),
    ((19794, 19799), (3326, 3326)),
    ((19800, 19805), (3327, 3327)),
    ((19818, 19822), (3329, 3329)),
    ((19824, 19829), (3331, 3331)),
    ((19830, 19835), (3332, 3332)),
    ((19848, 19852), (3334, 3334)),
    ((19854, 19859), (3336, 3336)),
    ((19860, 19865), (3337, 3337)),
    ((19878, 19882), (3339, 3339)),
    ((19884, 19889), (3341, 3341)),
    ((19890, 19895), (3342, 3342)),
    ((19908, 19912), (3344, 3344)),
    ((19914, 19919), (3346, 3346)),
    ((19920, 19925), (3347, 3347)),
    ((19938, 19942), (3349, 3349)),
    ((19944, 19949), (3351, 3351)),
    ((19950, 19955), (3352, 3352)),
    ((19968, 19972), (3354, 3354)),
    ((19974, 19979), (3356, 3356)),
    ((19980, 19985), (3357, 3357)),
    ((19998, 20002), (3359, 3359)),
    ((20004, 20009), (3361, 3361)),
    ((20010, 20015), (3362, 3362)),
    ((20028, 20032), (3364, 3364)),
    ((20034, 20039), (3366, 3366)),
    ((20040, 20045), (3367, 3367)),
    ((20058, 20062), (3369, 3369)),
    ((20064, 20069), (3371, 3371)),
    ((20070, 20075), (3372, 3372)),
    ((20088, 20092), (3374, 3374)),
    ((20094, 20099), (3376, 3376)),
    ((20100, 20105), (3377, 3377)),
    ((20118, 20122), (3379, 3379)),
    ((20124, 20129), (3381, 3381)),
    ((20130, 20135), (3382, 3382)),
    ((20148, 20152), (3384, 3384)),
    ((20154, 20159), (3386, 3386)),
    ((20160, 20165), (3387, 3387)),
    ((20178, 20182), (3389, 3389)),
    ((20184, 20189), (3391, 3391)),
    ((20190, 20195), (3392, 3392)),
    ((20208, 20212), (3394, 3394)),
    ((20214, 20219), (3396, 3396)),
    ((20220, 20225), (3397, 3397)),
    ((20238, 20242), (3399, 3399)),
    ((20244, 20249), (3401, 3401)),
    ((20250, 20255), (3402, 3402)),
    ((20268, 20272), (3404, 3404)),
    ((20274, 20279), (3406, 3406)),
    ((20280, 20285), (3407, 3407)),
    ((20298, 20302), (3409, 3409)),
    ((20304, 20309), (3411, 3411)),
    ((20310, 20315), (3412, 3412)),
    ((20328, 20332), (3414, 3414)),
    ((20334, 20339), (3416, 3416)),
    ((20340, 20345), (3417, 3417)),
    ((20358, 20362), (3419, 3419)),
    ((20364, 20369), (3421, 3421)),
    ((20370, 20375), (3422, 3422)),
    ((20388, 20392), (3424, 3424)),
    ((20394, 20399), (3426, 3426)),
    ((20400, 20405), (3427, 3427)),
    ((20418, 20422), (3429, 3429)),
    ((20424, 20429), (3431, 3431)),
    ((20430, 20435), (3432, 3432)),
    ((20448, 20452), (3434, 3434)),
    ((20454, 20459), (3436, 3436)),
    ((20460, 20465), (3437, 3437)),
    ((20478, 20482), (3439, 3439)),
    ((20484, 20489), (3441, 3441)),
    ((20490, 20495), (3442, 3442)),
    ((20508, 20512), (3444, 3444)),
    ((20514, 20519), (3446, 3446)),
    ((20520, 20525), (3447, 3447)),
    ((20538, 20542), (3449, 3449)),
    ((20544, 20549), (3451, 3451)),
    ((20550, 20555), (3452, 3452)),
    ((20568, 20572), (3454, 3454)),
    ((20574, 20579), (3456, 3456)),
    ((20580, 20585), (3457, 3457)),
    ((20598, 20602), (3459, 3459)),
    ((20604, 20609), (3461, 3461)),
    ((20610, 20615), (3462, 3462)),
    ((20628, 20632), (3464, 3464)),
    ((20634, 20639), (3466, 3466)),
    ((20640, 20645), (3467, 3467)),
    ((20658, 20662), (3469, 3469)),
    ((20664, 20669), (3471, 3471)),
    ((20670, 20675), (3472, 3472)),
    ((20688, 20692), (3474, 3474)),
    ((20694, 20699), (3476, 3476)),
    ((20700, 20705), (3477, 3477)),
    ((20718, 20722), (3479, 3479)),
    ((20724, 20729), (3481, 3481)),
    ((20730, 20735), (3482, 3482)),
    ((20748, 20752), (3484, 3484)),
    ((20754, 20759), (3486, 3486)),
    ((20760, 20765), (3487, 3487)),
    ((20778, 20782), (3489, 3489)),
    ((20784, 20789), (3491, 3491)),
    ((20790, 20795), (3492, 3492)),
    ((20808, 20812), (3494, 3494)),
    ((20814, 20819), (3496, 3496)),
    ((20820, 20825), (3497, 3497)),
    ((20838, 20842), (3499, 3499)),
    ((20844, 20849), (3501, 3501)),
    ((20850, 20855), (3502, 3502)),
    ((20868, 20872), (3504, 3504)),
    ((20874, 20879), (3506, 3506)),
    ((20880, 20885), (3507, 3507)),
    ((20898, 20902), (3509, 3509)),
    ((20904, 20909), (3511, 3511)),
    ((20910, 20915), (3512, 3512)),
    ((20928, 20932), (3514, 3514)),
    ((20934, 20939), (3516, 3516)),
    ((20940, 20945), (3517, 3517)),
    ((20958, 20962), (3519, 3519)),
    ((20964, 20969), (3521, 3521)),
    ((20970, 20975), (3522, 3522)),
    ((20988, 20992), (3524, 3524)),
    ((20994, 20999), (3526, 3526)),
    ((21000, 21005), (3527, 3527)),
    ((21018, 21022), (3529, 3529)),
    ((21024, 21029), (3531, 3531)),
    ((21042, 21046), (3533, 3533)),
    ((21048, 21053), (3535, 3535)),
    ((21054, 21059), (3536, 3536)),
    ((21072, 21076), (3538, 3538)),
    ((21078, 21083), (3540, 3540)),
    ((21084, 21089), (3541, 3541)),
    ((21102, 21106), (3543, 3543)),
    ((21108, 21113), (3545, 3545)),
    ((21114, 21119), (3546, 3546)),
    ((21132, 21136), (3548, 3548)),
    ((21138, 21143), (3550, 3550)),
    ((21144, 21149), (3551, 3551)),
    ((21162, 21166), (3553, 3553)),
    ((21168, 21173), (3555, 3555)),
    ((21174, 21179), (3556, 3556)),
    ((21192, 21196), (3558, 3558)),
    ((21198, 21203), (3560, 3560)),
    ((21204, 21209), (3561, 3561)),
    ((21222, 21226), (3563, 3563)),
    ((21228, 21233), (3565, 3565)),
    ((21234, 21239), (3566, 3566)),
    ((21252, 21256), (3568, 3568)),
    ((21258, 21263), (3570, 3570)),
    ((21264, 21269), (3571, 3571)),
    ((21282, 21286), (3573, 3573)),
    ((21288, 21293), (3575, 3575)),
    ((21294, 21299), (3576, 3576)),
    ((21312, 21316), (3578, 3578)),
    ((21318, 21323), (3580, 3580)),
    ((21324, 21329), (3581, 3581)),
    ((21342, 21346), (3583, 3583)),
    ((21348, 21353), (3585, 3585)),
    ((21354, 21359), (3586, 3586)),
    ((21372, 21376), (3588, 3588)),
    ((21378, 21383), (3590, 3590)),
    ((21384, 21389), (3591, 3591)),
    ((21402, 21406), (3593, 3593)),
    ((21408, 21413), (3595, 3595)),
    ((21414, 21419), (3596, 3596)),
    ((21432, 21436), (3598, 3598)),
    ((21438, 21443), (3600, 3600)),
    ((21444, 21449), (3601, 3601)),
    ((21462, 21466), (3603, 3603)),
    ((21468, 21473), (3605, 3605)),
    ((21474, 21479), (3606, 3606)),
    ((21492, 21496), (3608, 3608)),
    ((21498, 21503), (3610, 3610)),
    ((21504, 21509), (3611, 3611)),
    ((21522, 21526), (3613, 3613)),
    ((21528, 21533), (3615, 3615)),
    ((21534, 21539), (3616, 3616)),
    ((21552, 21556), (3618, 3618)),
    ((21558, 21563), (3620, 3620)),
    ((21564, 21569), (3621, 3621)),
    ((21582, 21586), (3623, 3623)),
    ((21588, 21593), (3625, 3625)),
    ((21594, 21599), (3626, 3626)),
    ((21612, 21616), (3628, 3628)),
    ((21618, 21623), (3630, 3630)),
    ((21624, 21629), (3631, 3631)),
    ((21642, 21646), (3633, 3633)),
    ((21648, 21653), (3635, 3635)),
    ((21654, 21659), (3636, 3636)),
    ((21672, 21676), (3638, 3638)),
    ((21678, 21683), (3640, 3640)),
    ((21684, 21689), (3641, 3641)),
    ((21702, 21706), (3643, 3643)),
    ((21708, 21713), (3645, 3645)),
    ((21714, 21719), (3646, 3646)),
    ((21732, 21736), (3648, 3648)),
    ((21738, 21743), (3650, 3650)),
    ((21744, 21749), (3651, 3651)),
    ((21762, 21766), (3653, 3653)),
    ((21768, 21773), (3655, 3655)),
    ((21774, 21779), (3656, 3656)),
    ((21792, 21796), (3658, 3658)),
    ((21798, 21803), (3660, 3660)),
    ((21804, 21809), (3661, 3661)),
    ((21822, 21826), (3663, 3663)),
    ((21828, 21833), (3665, 3665)),
    ((21834, 21839), (3666, 3666)),
    ((21852, 21856), (3668, 3668)),
    ((21858, 21863), (3670, 3670)),
    ((21864, 21869), (3671, 3671)),
    ((21882, 21886), (3673, 3673)),
    ((21888, 21893), (3675, 3675)),
    ((21894, 21899), (3676, 3676)),
    ((21912, 21916), (3678, 3678)),
    ((21918, 21923), (3680, 3680)),
    ((21924, 21929), (3681, 3681)),
    ((21942, 21946), (3683, 3683)),
    ((21948, 21953), (3685, 3685)),
    ((21954, 21959), (3686, 3686)),
    ((21972, 21976), (3688, 3688)),
    ((21978, 21983), (3690, 3690)),
    ((21984, 21989), (3691, 3691)),
    ((22002, 22006), (3693, 3693)),
    ((22008, 22013), (3695, 3695)),
    ((22014, 22019), (3696, 3696)),
    ((22032, 22036), (3698, 3698)),
    ((22038, 22043), (3700, 3700)),
    ((22044, 22049), (3701, 3701)),
    ((22062, 22066), (3703, 3703)),
    ((22068, 22073), (3705, 3705)),
    ((22074, 22079), (3706, 3706)),
    ((22092, 22096), (3708, 3708)),
    ((22098, 22103), (3710, 3710)),
    ((22104, 22109), (3711, 3711)),
    ((22122, 22126), (3713, 3713)),
    ((22128, 22133), (3715, 3715)),
    ((22134, 22139), (3716, 3716)),
    ((22152, 22156), (3718, 3718)),
    ((22158, 22163), (3720, 3720)),
    ((22164, 22169), (3721, 3721)),
    ((22182, 22186), (3723, 3723)),
    ((22188, 22193), (3725, 3725)),
    ((22194, 22199), (3726, 3726)),
    ((22212, 22216), (3728, 3728)),
    ((22218, 22223), (3730, 3730)),
    ((22224, 22229), (3731, 3731)),
    ((22242, 22246), (3733, 3733)),
    ((22248, 22253), (3735, 3735)),
    ((22254, 22259), (3736, 3736)),
    ((22272, 22276), (3738, 3738)),
    ((22278, 22283), (3740, 3740)),
    ((22284, 22289), (3741, 3741)),
    ((22302, 22306), (3743, 3743)),
    ((22308, 22313), (3745, 3745)),
    ((22314, 22319), (3746, 3746)),
    ((22332, 22336), (3748, 3748)),
    ((22338, 22343), (3750, 3750)),
    ((22344, 22349), (3751, 3751)),
    ((22362, 22366), (3753, 3753)),
    ((22368, 22373), (3755, 3755)),
    ((22374, 22379), (3756, 3756)),
    ((22392, 22396), (3758, 3758)),
    ((22398, 22403), (3760, 3760)),
    ((22404, 22409), (3761, 3761)),
    ((22422, 22426), (3763, 3763)),
    ((22428, 22433), (3765, 3765)),
    ((22434, 22439), (3766, 3766)),
    ((22452, 22456), (3768, 3768)),
    ((22458, 22463), (3770, 3770)),
    ((22464, 22469), (3771, 3771)),
    ((22482, 22486), (3773, 3773)),
    ((22488, 22493), (3775, 3775)),
    ((22494, 22499), (3776, 3776)),
    ((22512, 22516), (3778, 3778)),
    ((22518, 22523), (3780, 3780)),
    ((22524, 22529), (3781, 3781)),
    ((22542, 22546), (3783, 3783)),
    ((22548, 22553), (3785, 3785)),
    ((22554, 22559), (3786, 3786)),
    ((22572, 22576), (3788, 3788)),
    ((22578, 22583), (3790, 3790)),
    ((22584, 22589), (3791, 3791)),
    ((22602, 22606), (3793, 3793)),
    ((22608, 22613), (3795, 3795)),
    ((22614, 22619), (3796, 3796)),
    ((22632, 22636), (3798, 3798)),
    ((22638, 22643), (3800, 3800)),
    ((22644, 22649), (3801, 3801)),
    ((22662, 22666), (3803, 3803)),
    ((22668, 22673), (3805, 3805)),
    ((22674, 22679), (3806, 3806)),
    ((22692, 22696), (3808, 3808)),
    ((22698, 22703), (3810, 3810)),
    ((22704, 22709), (3811, 3811)),
    ((22722, 22726), (3813, 3813)),
    ((22728, 22733), (3815, 3815)),
    ((22734, 22739), (3816, 3816)),
    ((22752, 22756), (3818, 3818)),
    ((22758, 22763), (3820, 3820)),
    ((22764, 22769), (3821, 3821)),
    ((22782, 22786), (3823, 3823)),
    ((22788, 22793), (3825, 3825)),
    ((22794, 22799), (3826, 3826)),
    ((22812, 22816), (3828, 3828)),
    ((22818, 22823), (3830, 3830)),
    ((22824, 22829), (3831, 3831)),
    ((22842, 22846), (3833, 3833)),
    ((22848, 22853), (3835, 3835)),
    ((22854, 22859), (3836, 3836)),
    ((22872, 22876), (3838, 3838)),
    ((22878, 22883), (3840, 3840)),
    ((22884, 22889), (3841, 3841)),
    ((22902, 22906), (3843, 3843)),
    ((22908, 22913), (3845, 3845)),
    ((22914, 22919), (3846, 3846)),
    ((22932, 22936), (3848, 3848)),
    ((22938, 22943), (3850, 3850)),
    ((22944, 22949), (3851, 3851)),
    ((22962, 22966), (3853, 3853)),
    ((22968, 22973), (3855, 3855)),
    ((22974, 22979), (3856, 3856)),
    ((22992, 22996), (3858, 3858)),
    ((22998, 23003), (3860, 3860)),
    ((23004, 23009), (3861, 3861)),
    ((23022, 23026), (3863, 3863)),
    ((23028, 23033), (3865, 3865)),
    ((23046, 23050), (3867, 3867)),
    ((23052, 23057), (3869, 3869)),
    ((23058, 23063), (3870, 3870)),
    ((23076, 23080), (3872, 3872)),
    ((23082, 23087), (3874, 3874)),
    ((23088, 23093), (3875, 3875)),
    ((23106, 23110), (3877, 3877)),
    ((23112, 23117), (3879, 3879)),
    ((23118, 23123), (3880, 3880)),
    ((23136, 23140), (3882, 3882)),
    ((23142, 23147), (3884, 3884)),
    ((23148, 23153), (3885, 3885)),
    ((23166, 23170), (3887, 3887)),
    ((23172, 23177), (3889, 3889)),
    ((23178, 23183), (3890, 3890)),
    ((23196, 23200), (3892, 3892)),
    ((23202, 23207), (3894, 3894)),
    ((23208, 23213), (3895, 3895)),
    ((23226, 23230), (3897, 3897)),
    ((23232, 23237), (3899, 3899)),
    ((23238, 23243), (3900, 3900)),
    ((23256, 23260), (3902, 3902)),
    ((23262, 23267), (3904, 3904)),
    ((23268, 23273), (3905, 3905)),
    ((23286, 23290), (3907, 3907)),
    ((23292, 23297), (3909, 3909)),
    ((23298, 23303), (3910, 3910)),
    ((23316, 23320), (3912, 3912)),
    ((23322, 23327), (3914, 3914)),
    ((23328, 23333), (3915, 3915)),
    ((23346, 23350), (3917, 3917)),
    ((23352, 23357), (3919, 3919)),
    ((23358, 23363), (3920, 3920)),
    ((23376, 23380), (3922, 3922)),
    ((23382, 23387), (3924, 3924)),
    ((23388, 23393), (3925, 3925)),
    ((23406, 23410), (3927, 3927)),
    ((23412, 23417), (3929, 3929)),
    ((23418, 23423), (3930, 3930)),
    ((23436, 23440), (3932, 3932)),
    ((23442, 23447), (3934, 3934)),
    ((23448, 23453), (3935, 3935)),
    ((23466, 23470), (3937, 3937)),
    ((23472, 23477), (3939, 3939)),
    ((23478, 23483), (3940, 3940)),
    ((23496, 23500), (3942, 3942)),
    ((23502, 23507), (3944, 3944)),
    ((23508, 23513), (3945, 3945)),
    ((23526, 23530), (3947, 3947)),
    ((23532, 23537), (3949, 3949)),
    ((23538, 23543), (3950, 3950)),
    ((23556, 23560), (3952, 3952)),
    ((23562, 23567), (3954, 3954)),
    ((23568, 23573), (3955, 3955)),
    ((23586, 23590), (3957, 3957)),
    ((23592, 23597), (3959, 3959)),
    ((23598, 23603), (3960, 3960)),
    ((23616, 23620), (3962, 3962)),
    ((23622, 23627), (3964, 3964)),
    ((23628, 23633), (3965, 3965)),
    ((23646, 23650), (3967, 3967)),
    ((23652, 23657), (3969, 3969)),
    ((23658, 23663), (3970, 3970)),
    ((23676, 23680), (3972, 3972)),
    ((23682, 23687), (3974, 3974)),
    ((23688, 23693), (3975, 3975)),
    ((23706, 23710), (3977, 3977)),
    ((23712, 23717), (3979, 3979)),
    ((23718, 23723), (3980, 3980)),
    ((23736, 23740), (3982, 3982)),
    ((23742, 23747), (3984, 3984)),
    ((23748, 23753), (3985, 3985)),
    ((23766, 23770), (3987, 3987)),
    ((23772, 23777), (3989, 3989)),
    ((23778, 23783), (3990, 3990)),
    ((23796, 23800), (3992, 3992)),
    ((23802, 23807), (3994, 3994)),
    ((23808, 23813), (3995, 3995)),
    ((23826, 23830), (3997, 3997)),
    ((23832, 23837), (3999, 3999)),
    ((23838, 23843), (4000, 4000)),
    ((23856, 23860), (4002, 4002)),
    ((23862, 23867), (4004, 4004)),
    ((23868, 23873), (4005, 4005)),
    ((23886, 23890), (4007, 4007)),
    ((23892, 23897), (4009, 4009)),
    ((23898, 23903), (4010, 4010)),
    ((23916, 23920), (4012, 4012)),
    ((23922, 23927), (4014, 4014)),
    ((23928, 23933), (4015, 4015)),
    ((23946, 23950), (4017, 4017)),
    ((23952, 23957), (4019, 4019)),
    ((23958, 23963), (4020, 4020)),
    ((23976, 23980), (4022, 4022)),
    ((23982, 23987), (4024, 4024)),
    ((23988, 23993), (4025, 4025)),
    ((24006, 24010), (4027, 4027)),
    ((24012, 24017), (4029, 4029)),
    ((24018, 24023), (4030, 4030)),
    ((24036, 24040), (4032, 4032)),
    ((24042, 24047), (4034, 4034)),
    ((24048, 24053), (4035, 4035)),
    ((24066, 24070), (4037, 4037)),
    ((24072, 24077), (4039, 4039)),
    ((24078, 24083), (4040, 4040)),
    ((24096, 24100), (4042, 4042)),
    ((24102, 24107), (4044, 4044)),
    ((24108, 24113), (4045, 4045)),
    ((24126, 24130), (4047, 4047)),
    ((24132, 24137), (4049, 4049)),
    ((24138, 24143), (4050, 4050)),
    ((24156, 24160), (4052, 4052)),
    ((24162, 24167), (4054, 4054)),
    ((24168, 24173), (4055, 4055)),
    ((24186, 24190), (4057, 4057)),
    ((24192, 24197), (4059, 4059)),
    ((24198, 24203), (4060, 4060)),
    ((24216, 24220), (4062, 4062)),
    ((24222, 24227), (4064, 4064)),
    ((24228, 24233), (4065, 4065)),
    ((24246, 24250), (4067, 4067)),
    ((24252, 24257), (4069, 4069)),
    ((24258, 24263), (4070, 4070)),
    ((24276, 24280), (4072, 4072)),
    ((24282, 24287), (4074, 4074)),
    ((24288, 24293), (4075, 4075)),
    ((24306, 24310), (4077, 4077)),
    ((24312, 24317), (4079, 4079)),
    ((24318, 24323), (4080, 4080)),
    ((24336, 24340), (4082, 4082)),
    ((24342, 24347), (4084, 4084)),
    ((24348, 24353), (4085, 4085)),
    ((24366, 24370), (4087, 4087)),
    ((24372, 24377), (4089, 4089)),
    ((24378, 24383), (4090, 4090)),
    ((24396, 24400), (4092, 4092)),
    ((24402, 24407), (4094, 4094)),
    ((24408, 24413), (4095, 4095)),
    ((24426, 24430), (4097, 4097)),
    ((24432, 24437), (4099, 4099)),
    ((24438, 24443), (4100, 4100)),
    ((24456, 24460), (4102, 4102)),
    ((24462, 24467), (4104, 4104)),
    ((24468, 24473), (4105, 4105)),
    ((24486, 24490), (4107, 4107)),
    ((24492, 24497), (4109, 4109)),
    ((24498, 24503), (4110, 4110)),
    ((24516, 24520), (4112, 4112)),
    ((24522, 24527), (4114, 4114)),
    ((24528, 24533), (4115, 4115)),
    ((24546, 24550), (4117, 4117)),
    ((24552, 24557), (4119, 4119)),
    ((24558, 24563), (4120, 4120)),
    ((24576, 24580), (4122, 4122)),
    ((24582, 24587), (4124, 4124)),
    ((24588, 24593), (4125, 4125)),
    ((24606, 24610), (4127, 4127)),
    ((24612, 24617), (4129, 4129)),
    ((24618, 24623), (4130, 4130)),
    ((24636, 24640), (4132, 4132)),
    ((24642, 24647), (4134, 4134)),
    ((24648, 24653), (4135, 4135)),
    ((24666, 24670), (4137, 4137)),
    ((24672, 24677), (4139, 4139)),
    ((24678, 24683), (4140, 4140)),
    ((24696, 24700), (4142, 4142)),
    ((24702, 24707), (4144, 4144)),
    ((24708, 24713), (4145, 4145)),
    ((24726, 24730), (4147, 4147)),
    ((24732, 24737), (4149, 4149)),
    ((24738, 24743), (4150, 4150)),
    ((24756, 24760), (4152, 4152)),
    ((24762, 24767), (4154, 4154)),
    ((24768, 24773), (4155, 4155)),
    ((24786, 24790), (4157, 4157)),
    ((24792, 24797), (4159, 4159)),
    ((24798, 24803), (4160, 4160)),
    ((24816, 24820), (4162, 4162)),
    ((24822, 24827), (4164, 4164)),
    ((24828, 24833), (4165, 4165)),
    ((24846, 24850), (4167, 4167)),
    ((24852, 24857), (4169, 4169)),
    ((24858, 24863), (4170, 4170)),
    ((24876, 24880), (4172, 4172)),
    ((24882, 24887), (4174, 4174)),
    ((24888, 24893), (4175, 4175)),
    ((24906, 24910), (4177, 4177)),
    ((24912, 24917), (4179, 4179)),
    ((24918, 24923), (4180, 4180)),
    ((24936, 24940), (4182, 4182)),
    ((24942, 24947), (4184, 4184)),
    ((24948, 24953), (4185, 4185)),
    ((24966, 24970), (4187, 4187)),
    ((24972, 24977), (4189, 4189)),
    ((24978, 24983), (4190, 4190)),
    ((24996, 25000), (4192, 4192)),
    ((25002, 25007), (4194, 4194)),
    ((25008, 25013), (4195, 4195)),
    ((25026, 25030), (4197, 4197)),
    ((25032, 25037), (4199, 4199)),
    ((25050, 25054), (4201, 4201)),
    ((25056, 25061), (4203, 4203)),
    ((25062, 25067), (4204, 4204)),
    ((25080, 25084), (4206, 4206)),
    ((25086, 25091), (4208, 4208)),
    ((25092, 25097), (4209, 4209)),
    ((25110, 25114), (4211, 4211)),
    ((25116, 25121), (4213, 4213)),
    ((25122, 25127), (4214, 4214)),
    ((25140, 25144), (4216, 4216)),
    ((25146, 25151), (4218, 4218)),
    ((25152, 25157), (4219, 4219)),
    ((25170, 25174), (4221, 4221)),
    ((25176, 25181), (4223, 4223)),
    ((25182, 25187), (4224, 4224)),
    ((25200, 25204), (4226, 4226)),
    ((25206, 25211), (4228, 4228)),
    ((25212, 25217), (4229, 4229)),
    ((25230, 25234), (4231, 4231)),
    ((25236, 25241), (4233, 4233)),
    ((25242, 25247), (4234, 4234)),
    ((25260, 25264), (4236, 4236)),
    ((25266, 25271), (4238, 4238)),
    ((25272, 25277), (4239, 4239)),
    ((25290, 25294), (4241, 4241)),
    ((25296, 25301), (4243, 4243)),
    ((25302, 25307), (4244, 4244)),
    ((25320, 25324), (4246, 4246)),
    ((25326, 25331), (4248, 4248)),
    ((25332, 25337), (4249, 4249)),
    ((25350, 25354), (4251, 4251)),
    ((25356, 25361), (4253, 4253)),
    ((25362, 25367), (4254, 4254)),
    ((25380, 25384), (4256, 4256)),
    ((25386, 25391), (4258, 4258)),
    ((25392, 25397), (4259, 4259)),
    ((25410, 25414), (4261, 4261)),
    ((25416, 25421), (4263, 4263)),
    ((25422, 25427), (4264, 4264)),
    ((25440, 25444), (4266, 4266)),
    ((25446, 25451), (4268, 4268)),
    ((25452, 25457), (4269, 4269)),
    ((25470, 25474), (4271, 4271)),
    ((25476, 25481), (4273, 4273)),
    ((25482, 25487), (4274, 4274)),
    ((25500, 25504), (4276, 4276)),
    ((25506, 25511), (4278, 4278)),
    ((25512, 25517), (4279, 4279)),
    ((25530, 25534), (4281, 4281)),
    ((25536, 25541), (4283, 4283)),
    ((25542, 25547), (4284, 4284)),
    ((25560, 25564), (4286, 4286)),
    ((25566, 25571), (4288, 4288)),
    ((25572, 25577), (4289, 4289)),
    ((25590, 25594), (4291, 4291)),
    ((25596, 25601), (4293, 4293)),
    ((25602, 25607), (4294, 4294)),
    ((25620, 25624), (4296, 4296)),
    ((25626, 25631), (4298, 4298)),
    ((25632, 25637), (4299, 4299)),
    ((25650, 25654), (4301, 4301)),
    ((25656, 25661), (4303, 4303)),
    ((25662, 25667), (4304, 4304)),
    ((25680, 25684), (4306, 4306)),
    ((25686, 25691), (4308, 4308)),
    ((25692, 25697), (4309, 4309)),
    ((25710, 25714), (4311, 4311)),
    ((25716, 25721), (4313, 4313)),
    ((25722, 25727), (4314, 4314)),
    ((25740, 25744), (4316, 4316)),
    ((25746, 25751), (4318, 4318)),
    ((25752, 25757), (4319, 4319)),
    ((25770, 25774), (4321, 4321)),
    ((25776, 25781), (4323, 4323)),
    ((25782, 25787), (4324, 4324)),
    ((25800, 25804), (4326, 4326)),
    ((25806, 25811), (4328, 4328)),
    ((25812, 25817), (4329, 4329)),
    ((25830, 25834), (4331, 4331)),
    ((25836, 25841), (4333, 4333)),
    ((25842, 25847), (4334, 4334)),
    ((25860, 25864), (4336, 4336)),
    ((25866, 25871), (4338, 4338)),
    ((25872, 25877), (4339, 4339)),
    ((25890, 25894), (4341, 4341)),
    ((25896, 25901), (4343, 4343)),
    ((25902, 25907), (4344, 4344)),
    ((25920, 25924), (4346, 4346)),
    ((25926, 25931), (4348, 4348)),
    ((25932, 25937), (4349, 4349)),
    ((25950, 25954), (4351, 4351)),
    ((25956, 25961), (4353, 4353)),
    ((25962, 25967), (4354, 4354)),
    ((25980, 25984), (4356, 4356)),
    ((25986, 25991), (4358, 4358)),
    ((25992, 25997), (4359, 4359)),
    ((26010, 26014), (4361, 4361)),
    ((26016, 26021), (4363, 4363)),
    ((26022, 26027), (4364, 4364)),
    ((26040, 26044), (4366, 4366)),
    ((26046, 26051), (4368, 4368)),
    ((26052, 26057), (4369, 4369)),
    ((26070, 26074), (4371, 4371)),
    ((26076, 26081), (4373, 4373)),
    ((26082, 26087), (4374, 4374)),
    ((26100, 26104), (4376, 4376)),
    ((26106, 26111), (4378, 4378)),
    ((26112, 26117), (4379, 4379)),
    ((26130, 26134), (4381, 4381)),
    ((26136, 26141), (4383, 4383)),
    ((26142, 26147), (4384, 4384)),
    ((26160, 26164), (4386, 4386)),
    ((26166, 26171), (4388, 4388)),
    ((26172, 26177), (4389, 4389)),
    ((26190, 26194), (4391, 4391)),
    ((26196, 26201), (4393, 4393)),
    ((26202, 26207), (4394, 4394)),
    ((26220, 26224), (4396, 4396)),
    ((26226, 26231), (4398, 4398)),
    ((26232, 26237), (4399, 4399)),
    ((26250, 26254), (4401, 4401)),
    ((26256, 26261), (4403, 4403)),
    ((26262, 26267), (4404, 4404)),
    ((26280, 26284), (4406, 4406)),
    ((26286, 26291), (4408, 4408)),
    ((26292, 26297), (4409, 4409)),
    ((26310, 26314), (4411, 4411)),
    ((26316, 26321), (4413, 4413)),
    ((26322, 26327), (4414, 4414)),
    ((26340, 26344), (4416, 4416)),
    ((26346, 26351), (4418, 4418)),
    ((26352, 26357), (4419, 4419)),
    ((26370, 26374), (4421, 4421)),
    ((26376, 26381), (4423, 4423)),
    ((26382, 26387), (4424, 4424)),
    ((26400, 26404), (4426, 4426)),
    ((26406, 26411), (4428, 4428)),
    ((26412, 26417), (4429, 4429)),
    ((26430, 26434), (4431, 4431)),
    ((26436, 26441), (4433, 4433)),
    ((26442, 26447), (4434, 4434)),
    ((26460, 26464), (4436, 4436)),
    ((26466, 26471), (4438, 4438)),
    ((26472, 26477), (4439, 4439)),
    ((26490, 26494), (4441, 4441)),
    ((26496, 26501), (4443, 4443)),
    ((26502, 26507), (4444, 4444)),
    ((26520, 26524), (4446, 4446)),
    ((26526, 26531), (4448, 4448)),
    ((26532, 26537), (4449, 4449)),
    ((26550, 26554), (4451, 4451)),
    ((26556, 26561), (4453, 4453)),
    ((26562, 26567), (4454, 4454)),
    ((26580, 26584), (4456, 4456)),
    ((26586, 26591), (4458, 4458)),
    ((26592, 26597), (4459, 4459)),
    ((26610, 26614), (4461, 4461)),
    ((26616, 26621), (4463, 4463)),
    ((26622, 26627), (4464, 4464)),
    ((26640, 26644), (4466, 4466)),
    ((26646, 26651), (4468, 4468)),
    ((26652, 26657), (4469, 4469)),
    ((26670, 26674), (4471, 4471)),
    ((26676, 26681), (4473, 4473)),
    ((26682, 26687), (4474, 4474)),
    ((26700, 26704), (4476, 4476)),
    ((26706, 26711), (4478, 4478)),
    ((26712, 26717), (4479, 4479)),
    ((26730, 26734), (4481, 4481)),
    ((26736, 26741), (4483, 4483)),
    ((26742, 26747), (4484, 4484)),
    ((26760, 26764), (4486, 4486)),
    ((26766, 26771), (4488, 4488)),
    ((26772, 26777), (4489, 4489)),
    ((26790, 26794), (4491, 4491)),
    ((26796, 26801), (4493, 4493)),
    ((26802, 26807), (4494, 4494)),
    ((26820, 26824), (4496, 4496)),
    ((26826, 26831), (4498, 4498)),
    ((26832, 26837), (4499, 4499)),
    ((26850, 26854), (4501, 4501)),
    ((26856, 26861), (4503, 4503)),
    ((26862, 26867), (4504, 4504)),
    ((26880, 26884), (4506, 4506)),
    ((26886, 26891), (4508, 4508)),
    ((26892, 26897), (4509, 4509)),
    ((26910, 26914), (4511, 4511)),
    ((26916, 26921), (4513, 4513)),
    ((26922, 26927), (4514, 4514)),
    ((26940, 26944), (4516, 4516)),
    ((26946, 26951), (4518, 4518)),
    ((26952, 26957), (4519, 4519)),
    ((26970, 26974), (4521, 4521)),
    ((26976, 26981), (4523, 4523)),
    ((26982, 26987), (4524, 4524)),
    ((27000, 27004), (4526, 4526)),
    ((27006, 27011), (4528, 4528)),
    ((27012, 27017), (4529, 4529)),
    ((27030, 27034), (4531, 4531)),
    ((27036, 27041), (4533, 4533)),
    ((27054, 27058), (4535, 4535)),
    ((27060, 27065), (4537, 4537)),
    ((27066, 27071), (4538, 4538)),
    ((27084, 27088), (4540, 4540)),
    ((27090, 27095), (4542, 4542)),
    ((27096, 27101), (4543, 4543)),
    ((27114, 27118), (4545, 4545)),
    ((27120, 27125), (4547, 4547)),
    ((27126, 27131), (4548, 4548)),
    ((27144, 27148), (4550, 4550)),
    ((27150, 27155), (4552, 4552)),
    ((27156, 27161), (4553, 4553)),
    ((27174, 27178), (4555, 4555)),
    ((27180, 27185), (4557, 4557)),
    ((27186, 27191), (4558, 4558)),
    ((27204, 27208), (4560, 4560)),
    ((27210, 27215), (4562, 4562)),
    ((27216, 27221), (4563, 4563)),
    ((27234, 27238), (4565, 4565)),
    ((27240, 27245), (4567, 4567)),
    ((27246, 27251), (4568, 4568)),
    ((27264, 27268), (4570, 4570)),
    ((27270, 27275), (4572, 4572)),
    ((27276, 27281), (4573, 4573)),
    ((27294, 27298), (4575, 4575)),
    ((27300, 27305), (4577, 4577)),
    ((27306, 27311), (4578, 4578)),
    ((27324, 27328), (4580, 4580)),
    ((27330, 27335), (4582, 4582)),
    ((27336, 27341), (4583, 4583)),
    ((27354, 27358), (4585, 4585)),
    ((27360, 27365), (4587, 4587)),
    ((27366, 27371), (4588, 4588)),
    ((27384, 27388), (4590, 4590)),
    ((27390, 27395), (4592, 4592)),
    ((27396, 27401), (4593, 4593)),
    ((27414, 27418), (4595, 4595)),
    ((27420, 27425), (4597, 4597)),
    ((27426, 27431), (4598, 4598)),
    ((27444, 27448), (4600, 4600)),
    ((27450, 27455), (4602, 4602)),
    ((27456, 27461), (4603, 4603)),
    ((27474, 27478), (4605, 4605)),
    ((27480, 27485), (4607, 4607)),
    ((27486, 27491), (4608, 4608)),
    ((27504, 27508), (4610, 4610)),
    ((27510, 27515), (4612, 4612)),
    ((27516, 27521), (4613, 4613)),
    ((27534, 27538), (4615, 4615)),
    ((27540, 27545), (4617, 4617)),
    ((27546, 27551), (4618, 4618)),
    ((27564, 27568), (4620, 4620)),
    ((27570, 27575), (4622, 4622)),
    ((27576, 27581), (4623, 4623)),
    ((27594, 27598), (4625, 4625)),
    ((27600, 27605), (4627, 4627)),
    ((27606, 27611), (4628, 4628)),
    ((27624, 27628), (4630, 4630)),
    ((27630, 27635), (4632, 4632)),
    ((27636, 27641), (4633, 4633)),
    ((27654, 27658), (4635, 4635)),
    ((27660, 27665), (4637, 4637)),
    ((27666, 27671), (4638, 4638)),
    ((27684, 27688), (4640, 4640)),
    ((27690, 27695), (4642, 4642)),
    ((27696, 27701), (4643, 4643)),
    ((27714, 27718), (4645, 4645)),
    ((27720, 27725), (4647, 4647)),
    ((27726, 27731), (4648, 4648)),
    ((27744, 27748), (4650, 4650)),
    ((27750, 27755), (4652, 4652)),
    ((27756, 27761), (4653, 4653)),
    ((27774, 27778), (4655, 4655)),
    ((27780, 27785), (4657, 4657)),
    ((27786, 27791), (4658, 4658)),
    ((27804, 27808), (4660, 4660)),
    ((27810, 27815), (4662, 4662)),
    ((27816, 27821), (4663, 4663)),
    ((27834, 27838), (4665, 4665)),
    ((27840, 27845), (4667, 4667)),
    ((27846, 27851), (4668, 4668)),
    ((27864, 27868), (4670, 4670)),
    ((27870, 27875), (4672, 4672)),
    ((27876, 27881), (4673, 4673)),
    ((27894, 27898), (4675, 4675)),
    ((27900, 27905), (4677, 4677)),
    ((27906, 27911), (4678, 4678)),
    ((27924, 27928), (4680, 4680)),
    ((27930, 27935), (4682, 4682)),
    ((27936, 27941), (4683, 4683)),
    ((27954, 27958), (4685, 4685)),
    ((27960, 27965), (4687, 4687)),
    ((27966, 27971), (4688, 4688)),
    ((27984, 27988), (4690, 4690)),
    ((27990, 27995), (4692, 4692)),
    ((27996, 28001), (4693, 4693)),
    ((28014, 28018), (4695, 4695)),
    ((28020, 28025), (4697, 4697)),
    ((28026, 28031), (4698, 4698)),
    ((28044, 28048), (4700, 4700)),
    ((28050, 28055), (4702, 4702)),
    ((28056, 28061), (4703, 4703)),
    ((28074, 28078), (4705, 4705)),
    ((28080, 28085), (4707, 4707)),
    ((28086, 28091), (4708, 4708)),
    ((28104, 28108), (4710, 4710)),
    ((28110, 28115), (4712, 4712)),
    ((28116, 28121), (4713, 4713)),
    ((28134, 28138), (4715, 4715)),
    ((28140, 28145), (4717, 4717)),
    ((28146, 28151), (4718, 4718)),
    ((28164, 28168), (4720, 4720)),
    ((28170, 28175), (4722, 4722)),
    ((28176, 28181), (4723, 4723)),
    ((28194, 28198), (4725, 4725)),
    ((28200, 28205), (4727, 4727)),
    ((28206, 28211), (4728, 4728)),
    ((28224, 28228), (4730, 4730)),
    ((28230, 28235), (4732, 4732)),
    ((28236, 28241), (4733, 4733)),
    ((28254, 28258), (4735, 4735)),
    ((28260, 28265), (4737, 4737)),
    ((28266, 28271), (4738, 4738)),
    ((28284, 28288), (4740, 4740)),
    ((28290, 28295), (4742, 4742)),
    ((28296, 28301), (4743, 4743)),
    ((28314, 28318), (4745, 4745)),
    ((28320, 28325), (4747, 4747)),
    ((28326, 28331), (4748, 4748)),
    ((28344, 28348), (4750, 4750)),
    ((28350, 28355), (4752, 4752)),
    ((28356, 28361), (4753, 4753)),
    ((28374, 28378), (4755, 4755)),
    ((28380, 28385), (4757, 4757)),
    ((28386, 28391), (4758, 4758)),
    ((28404, 28408), (4760, 4760)),
    ((28410, 28415), (4762, 4762)),
    ((28416, 28421), (4763, 4763)),
    ((28434, 28438), (4765, 4765)),
    ((28440, 28445), (4767, 4767)),
    ((28446, 28451), (4768, 4768)),
    ((28464, 28468), (4770, 4770)),
    ((28470, 28475), (4772, 4772)),
    ((28476, 28481), (4773, 4773)),
    ((28494, 28498), (4775, 4775)),
    ((28500, 28505), (4777, 4777)),
    ((28506, 28511), (4778, 4778)),
    ((28524, 28528), (4780, 4780)),
    ((28530, 28535), (4782, 4782)),
    ((28536, 28541), (4783, 4783)),
    ((28554, 28558), (4785, 4785)),
    ((28560, 28565), (4787, 4787)),
    ((28566, 28571), (4788, 4788)),
    ((28584, 28588), (4790, 4790)),
    ((28590, 28595), (4792, 4792)),
    ((28596, 28601), (4793, 4793)),
    ((28614, 28618), (4795, 4795)),
    ((28620, 28625), (4797, 4797)),
    ((28626, 28631), (4798, 4798)),
    ((28644, 28648), (4800, 4800)),
    ((28650, 28655), (4802, 4802)),
    ((28656, 28661), (4803, 4803)),
    ((28674, 28678), (4805, 4805)),
    ((28680, 28685), (4807, 4807)),
    ((28686, 28691), (4808, 4808)),
    ((28704, 28708), (4810, 4810)),
    ((28710, 28715), (4812, 4812)),
    ((28716, 28721), (4813, 4813)),
    ((28734, 28738), (4815, 4815)),
    ((28740, 28745), (4817, 4817)),
    ((28746, 28751), (4818, 4818)),
    ((28764, 28768), (4820, 4820)),
    ((28770, 28775), (4822, 4822)),
    ((28776, 28781), (4823, 4823)),
    ((28794, 28798), (4825, 4825)),
    ((28800, 28805), (4827, 4827)),
    ((28806, 28811), (4828, 4828)),
    ((28824, 28828), (4830, 4830)),
    ((28830, 28835), (4832, 4832)),
    ((28836, 28841), (4833, 4833)),
    ((28854, 28858), (4835, 4835)),
    ((28860, 28865), (4837, 4837)),
    ((28866, 28871), (4838, 4838)),
    ((28884, 28888), (4840, 4840)),
    ((28890, 28895), (4842, 4842)),
    ((28896, 28901), (4843, 4843)),
    ((28914, 28918), (4845, 4845)),
    ((28920, 28925), (4847, 4847)),
    ((28926, 28931), (4848, 4848)),
    ((28944, 28948), (4850, 4850)),
    ((28950, 28955), (4852, 4852)),
    ((28956, 28961), (4853, 4853)),
    ((28974, 28978), (4855, 4855)),
    ((28980, 28985), (4857, 4857)),
    ((28986, 28991), (4858, 4858)),
    ((29004, 29008), (4860, 4860)),
    ((29010, 29015), (4862, 4862)),
    ((29016, 29021), (4863, 4863)),
    ((29034, 29038), (4865, 4865)),
    ((29040, 29045), (4867, 4867)),
    ((29058, 29062), (4869, 4869)),
    ((29064, 29069), (4871, 4871)),
    ((29070, 29075), (4872, 4872)),
    ((29088, 29092), (4874, 4874)),
    ((29094, 29099), (4876, 4876)),
    ((29100, 29105), (4877, 4877)),
    ((29118, 29122), (4879, 4879)),
    ((29124, 29129), (4881, 4881)),
    ((29130, 29135), (4882, 4882)),
    ((29148, 29152), (4884, 4884)),
    ((29154, 29159), (4886, 4886)),
    ((29160, 29165), (4887, 4887)),
    ((29178, 29182), (4889, 4889)),
    ((29184, 29189), (4891, 4891)),
    ((29190, 29195), (4892, 4892)),
    ((29208, 29212), (4894, 4894)),
    ((29214, 29219), (4896, 4896)),
    ((29220, 29225), (4897, 4897)),
    ((29238, 29242), (4899, 4899)),
    ((29244, 29249), (4901, 4901)),
    ((29250, 29255), (4902, 4902)),
    ((29268, 29272), (4904, 4904)),
    ((29274, 29279), (4906, 4906)),
    ((29280, 29285), (4907, 4907)),
    ((29298, 29302), (4909, 4909)),
    ((29304, 29309), (4911, 4911)),
    ((29310, 29315), (4912, 4912)),
    ((29328, 29332), (4914, 4914)),
    ((29334, 29339), (4916, 4916)),
    ((29340, 29345), (4917, 4917)),
    ((29358, 29362), (4919, 4919)),
    ((29364, 29369), (4921, 4921)),
    ((29370, 29375), (4922, 4922)),
    ((29388, 29392), (4924, 4924)),
    ((29394, 29399), (4926, 4926)),
    ((29400, 29405), (4927, 4927)),
    ((29418, 29422), (4929, 4929)),
    ((29424, 29429), (4931, 4931)),
    ((29430, 29435), (4932, 4932)),
    ((29448, 29452), (4934, 4934)),
    ((29454, 29459), (4936, 4936)),
    ((29460, 29465), (4937, 4937)),
    ((29478, 29482), (4939, 4939)),
    ((29484, 29489), (4941, 4941)),
    ((29490, 29495), (4942, 4942)),
    ((29508, 29512), (4944, 4944)),
    ((29514, 29519), (4946, 4946)),
    ((29520, 29525), (4947, 4947)),
    ((29538, 29542), (4949, 4949)),
    ((29544, 29549), (4951, 4951)),
    ((29550, 29555), (4952, 4952)),
    ((29568, 29572), (4954, 4954)),
    ((29574, 29579), (4956, 4956)),
    ((29580, 29585), (4957, 4957)),
    ((29598, 29602), (4959, 4959)),
    ((29604, 29609), (4961, 4961)),
    ((29610, 29615), (4962, 4962)),
    ((29628, 29632), (4964, 4964)),
    ((29634, 29639), (4966, 4966)),
    ((29640, 29645), (4967, 4967)),
    ((29658, 29662), (4969, 4969)),
    ((29664, 29669), (4971, 4971)),
    ((29670, 29675), (4972, 4972)),
    ((29688, 29692), (4974, 4974)),
    ((29694, 29699), (4976, 4976)),
    ((29700, 29705), (4977, 4977)),
    ((29718, 29722), (4979, 4979)),
    ((29724, 29729), (4981, 4981)),
    ((29730, 29735), (4982, 4982)),
    ((29748, 29752), (4984, 4984)),
    ((29754, 29759), (4986, 4986)),
    ((29760, 29765), (4987, 4987)),
    ((29778, 29782), (4989, 4989)),
    ((29784, 29789), (4991, 4991)),
    ((29790, 29795), (4992, 4992)),
    ((29808, 29812), (4994, 4994)),
    ((29814, 29819), (4996, 4996)),
    ((29820, 29825), (4997, 4997)),
    ((29838, 29842), (4999, 4999)),
    ((29844, 29849), (5001, 5001)),
    ((29850, 29855), (5002, 5002)),
    ((29868, 29872), (5004, 5004)),
    ((29874, 29879), (5006, 5006)),
    ((29880, 29885), (5007, 5007)),
    ((29898, 29902), (5009, 5009)),
    ((29904, 29909), (5011, 5011)),
    ((29910, 29915), (5012, 5012)),
    ((29928, 29932), (5014, 5014)),
    ((29934, 29939), (5016, 5016)),
    ((29940, 29945), (5017, 5017)),
    ((29958, 29962), (5019, 5019)),
    ((29964, 29969), (5021, 5021)),
    ((29970, 29975), (5022, 5022)),
    ((29988, 29992), (5024, 5024)),
    ((29994, 29999), (5026, 5026)),
    ((30000, 30005), (5027, 5027)),
    ((30018, 30022), (5029, 5029)),
    ((30024, 30029), (5031, 5031)),
    ((30030, 30035), (5032, 5032)),
    ((30048, 30052), (5034, 5034)),
    ((30054, 30059), (5036, 5036)),
    ((30060, 30065), (5037, 5037)),
    ((30078, 30082), (5039, 5039)),
    ((30084, 30089), (5041, 5041)),
    ((30090, 30095), (5042, 5042)),
    ((30108, 30112), (5044, 5044)),
    ((30114, 30119), (5046, 5046)),
    ((30120, 30125), (5047, 5047)),
    ((30138, 30142), (5049, 5049)),
    ((30144, 30149), (5051, 5051)),
    ((30150, 30155), (5052, 5052)),
    ((30168, 30172), (5054, 5054)),
    ((30174, 30179), (5056, 5056)),
    ((30180, 30185), (5057, 5057)),
    ((30198, 30202), (5059, 5059)),
    ((30204, 30209), (5061, 5061)),
    ((30210, 30215), (5062, 5062)),
    ((30228, 30232), (5064, 5064)),
    ((30234, 30239), (5066, 5066)),
    ((30240, 30245), (5067, 5067)),
    ((30258, 30262), (5069, 5069)),
    ((30264, 30269), (5071, 5071)),
    ((30270, 30275), (5072, 5072)),
    ((30288, 30292), (5074, 5074)),
    ((30294, 30299), (5076, 5076)),
    ((30300, 30305), (5077, 5077)),
    ((30318, 30322), (5079, 5079)),
    ((30324, 30329), (5081, 5081)),
    ((30330, 30335), (5082, 5082)),
    ((30348, 30352), (5084, 5084)),
    ((30354, 30359), (5086, 5086)),
    ((30360, 30365), (5087, 5087)),
    ((30378, 30382), (5089, 5089)),
    ((30384, 30389), (5091, 5091)),
    ((30390, 30395), (5092, 5092)),
    ((30408, 30412), (5094, 5094)),
    ((30414, 30419), (5096, 5096)),
    ((30420, 30425), (5097, 5097)),
    ((30438, 30442), (5099, 5099)),
    ((30444, 30449), (5101, 5101)),
    ((30450, 30455), (5102, 5102)),
    ((30468, 30472), (5104, 5104)),
    ((30474, 30479), (5106, 5106)),
    ((30480, 30485), (5107, 5107)),
    ((30498, 30502), (5109, 5109)),
    ((30504, 30509), (5111, 5111)),
    ((30510, 30515), (5112, 5112)),
    ((30528, 30532), (5114, 5114)),
    ((30534, 30539), (5116, 5116)),
    ((30540, 30545), (5117, 5117)),
    ((30558, 30562), (5119, 5119)),
    ((30564, 30569), (5121, 5121)),
    ((30570, 30575), (5122, 5122)),
    ((30588, 30592), (5124, 5124)),
    ((30594, 30599), (5126, 5126)),
    ((30600, 30605), (5127, 5127)),
    ((30618, 30622), (5129, 5129)),
    ((30624, 30629), (5131, 5131)),
    ((30630, 30635), (5132, 5132)),
    ((30648, 30652), (5134, 5134)),
    ((30654, 30659), (5136, 5136)),
    ((30660, 30665), (5137, 5137)),
    ((30678, 30682), (5139, 5139)),
    ((30684, 30689), (5141, 5141)),
    ((30690, 30695), (5142, 5142)),
    ((30708, 30712), (5144, 5144)),
    ((30714, 30719), (5146, 5146)),
    ((30720, 30725), (5147, 5147)),
    ((30738, 30742), (5149, 5149)),
    ((30744, 30749), (5151, 5151)),
    ((30750, 30755), (5152, 5152)),
    ((30768, 30772), (5154, 5154)),
    ((30774, 30779), (5156, 5156)),
    ((30780, 30785), (5157, 5157)),
    ((30798, 30802), (5159, 5159)),
    ((30804, 30809), (5161, 5161)),
    ((30810, 30815), (5162, 5162)),
    ((30828, 30832), (5164, 5164)),
    ((30834, 30839), (5166, 5166)),
    ((30840, 30845), (5167, 5167)),
    ((30858, 30862), (5169, 5169)),
    ((30864, 30869), (5171, 5171)),
    ((30870, 30875), (5172, 5172)),
    ((30888, 30892), (5174, 5174)),
    ((30894, 30899), (5176, 5176)),
    ((30900, 30905), (5177, 5177)),
    ((30918, 30922), (5179, 5179)),
    ((30924, 30929), (5181, 5181)),
    ((30930, 30935), (5182, 5182)),
    ((30948, 30952), (5184, 5184)),
    ((30954, 30959), (5186, 5186)),
    ((30960, 30965), (5187, 5187)),
    ((30978, 30982), (5189, 5189)),
    ((30984, 30989), (5191, 5191)),
    ((30990, 30995), (5192, 5192)),
    ((31008, 31012), (5194, 5194)),
    ((31014, 31019), (5196, 5196)),
    ((31020, 31025), (5197, 5197)),
)
